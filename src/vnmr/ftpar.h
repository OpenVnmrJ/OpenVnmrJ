/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */

/*-------------------------------------------------------
|							|
|   This header file is to contain the structure	|
|   definitions for all FT parameters.			|
|							|
+------------------------------------------------------*/

#define MAXPATH	256
#define SSLSFRQSIZE_MAX   4

struct _dsparInfo
{
    double      lp;             /* 1st order phase shift for POSTPROC data */
    double      dslsfrq;        /* filter shift (in Hz) for bandpass filters */
    double      lvl;            /* lvl value from input FID block header */
    double      tlt;            /* tlt value from input FID block header */
    double      dsfiltfactor;   /* sw divided by digital filter width */
    double      *filter;        /* memory for digital filter */
    double      *buffer;        /* buffer for filtered data */
    float       *data;          /* buffer for FID */
    int         dsflag;         /* type of oversampling POSTPROC or ACQPROC */
    int         fileflag;       /* TRUE if writing a FID file */
    int         dscoeff;        /* number of coeffiecients in digital filter */
    int         dsfactor;       /* oversampling factor */
    int         finalnp;        /* np after filtering and downsampling */
    int         dp;             /* FALSE if dp = 'n' */
    int         ctcount;        /* ctcount value from input FID block header */
    short       scale;          /* scale value from input FID block header */
    char        newpath[MAXPATH];/* path for experiment to which
                                   FID should be written after filtering */
};

typedef struct _dsparInfo	dsparInfo;

struct _ssparInfo
{
   double	*buffer;
   int		membytes;
   int		zfsflag;
   int		lfsflag;
   int		decfactor;
   int		ntaps;
   int		matsize;
   double	sslsfrq[SSLSFRQSIZE_MAX];
   int		sslsfrqsize;
};

typedef struct _ssparInfo	ssparInfo;

struct _ftargInfo
{
   int          useFtargs;               /* flag determining if ftargs are used */

   double      *phase;                   /* malloced space to hold individual phase correction values */
   int          numPhase;                /* number of phase correction values in phase  */
   int          curPhase;                /* variable used in ft.c to hold current phase index value */
   char         autoPhasePar[MAXPATH];   /* name of parameter to hold auto-calcualted phase values */
   int          autoPhaseInit;           /* flag set in ft.c to decide if first phase has been calculated */
   int          phasePnts;               /* number of point for phase calculation */
   int          phaseSkipPnts;           /* number of points to skip from beginning of FID for phase calc */
   int          phaseRmsPnts;            /* number of points to RMS calculation */
   double       phaseRmsMult;            /* multiplier for RMS noise calc. */
   float       *autophase;               /* malloced space to hold calculated phase values for first FID */

   int          eccPnts;                 /* number of points in reference scan for ECC correction */
   int          eccLsfid;                /* skip points for reference scan for ECC correction */
   double      *ecc;                     /* malloced space to phases of ECC reference scan */
   char         eccFile[MAXPATH];        /* file name of reference phase data generated by calcECC */

   double       *freq;                   /* malloced space to hold individual frequency values */
   int          numFreq;                 /* number of frequency values in freq */
   int          curFreq;                 /* variable used in ft.c to hold current frequency index value */
   double       initFreq;                /* initial frequency offset */
   double       incrFreq;                /* incremental frequency offset */

   int          *sa;                     /* malloced space to hold individual sampling window values */
   int          *sas;                    /* malloced space to hold individual sampling window shift values */
   int          numSa;                   /* number of sampling window values */
   int          curSa;                   /* variable used in ft.c to hold current sampling index value */
   int          numSas;                  /* number of sampling window shift values */
   int          curSas;                  /* variable used in ft.c to hold current sampling shift index value */

   int          *shift;                  /* malloced space to hold individual shift values */
   int          numShift;                /* number of shift values */
   int          curShift;                /* variable used in ft.c to hold current shift value */
   int          initShift;                /* initial data shift */
   int          incrShift;                /* incremental data shift */

   double      *amp;                     /* malloced space to hold individual amplitude values */
   int          numAmp;                  /* number of amplitude values in amp */
   int          curAmp;                  /* variable used in ft.c to hold current amplitude index value */

   int		fidsPerSpec;             /* number of FIDs to combine */
   int		multfid;                 /* flag used in ft.c to multiply FID by coefficients */
   int          saveT2dc;                /* remove if t2dc is needed on summed FID */
   float        rr, ri, ir, ii;          /* FID multiplication coefficients */
   float       *buffer;                  /* malloced space used to combine FIDs */
   FILE        *infoFD;                  /* infomation output file descriptor */
};

typedef struct _ftargInfo	ftargInfo;

struct htParams /* Hadamard transform */
{
  int dim;      /* Hadamard dimension = 2, 12, 20, or 28 */
  int fsize;    /* size of ht frequency parameter */
  double *freq; /* values of ht frequency parameter */
  int *index;   /* indices of non-zerofill data */
  int niofs;    /* ni or ni2 index offset */
  int Hx;       /* Hadamard unit cell dimension */
  int H2;       /* full dimension of Hadamard matrix */
  short brev;   /* bit reversal */
  short rdr;    /* read Hadamard matrix from file */
};
typedef struct htParams htPar;

struct _ftparInfo
{
   dsparInfo	dspar;
   ssparInfo	sspar;
   ssparInfo	sspar1;
   ftargInfo	ftarg;
   double	phfid0;
   double	lsfrq0;
   double	phfid1;
   double	lsfrq1;
   double	lpval;
   double	daslp;
   int		arraydim;
   int		arrayindex;
   int		cf;
   int		cfstep;
   int		combineflag;
   int		displaynum;
   int		dofirstft;
   int		dpflag;
   int		doabsval;
   int		dophase;
   int		dopower;
   int		dophaseangle;
   int		dof1absval;
   int		dof1phase;
   int		dof1power;
   int		dof1phaseangle;
   int		f2select;
   int		fn0;
   int		fn1;
   int		hypercomplex;
   int		lsfid0;
   int		lsfid1;
   int		nblocks;
   int		nf;
   int		ni0;
   int		ni1;
   int		np0;
   int		np1;
   int		offset_flag;
   int		procstatus;
   int		ptype;
   int		sperblock0;
   int		sperblock1;
   int		t1dc;
   int		t2dc;
   int		t1_offset;
   int		t2_offset;
   int		wtflag;
   int		zeroflag;
   int		D_cmplx;
   int		D_dimen;
   int		D_dimname;
   int		D_dsplymode;
};

typedef struct _ftparInfo	ftparInfo;

struct wtparams
  { double sw,lb,sb,sbs,gf,gfs,awc,sa,sas;
    int lb_active,sb_active,sbs_active,gf_active,gfs_active,awc_active,wtflag;
    int sa_active,sas_active;
    char lbname[6],sbname[6],sbsname[6],gfname[6],gfsname[6],awcname[6];
    char saname[6],sasname[6];
  };
extern int init_wt1(struct wtparams *wtpar, int fdimname);
extern int init_wt2(struct wtparams *wtpar, register float  *wtfunc,
             register int n, int rftflag, int fdimname, double fpmult, int rdwtflag);
