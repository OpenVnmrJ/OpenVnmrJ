#!/usr/bin/env python

"""
   Python script to decode the WIndView csv file traces into a readable format text file.
   Within Viewview expand of area of interest and use export csv file
   GIve this file to this script to read and decode.
   -t maybe used to mark events of interest to start the elaspe time from this event 
    e.g. -t RTVARUPDATE  - result of readMRIUserByte 

    Greg Brissey   9/01/2012
   
"""
__author__ = "Greg Brissey"
__version__ = "$Revision: 1.0 $"
__date__ = "$Date: 2012/08/09 $"
__copyright__ = "Copyright (c) 2012 Agilent Technologies"
__license__ = "Python"



import sys, os, glob, datetime, subprocess
import re
import pexpect
import logging
# from decimal import *
# import argparse
from optparse import OptionParser

# Change gitRepoDir to your GIT master branch repo
gitRepoDir = os.path.join(os.path.sep,'home','greg','workspace','master','git-repo')

# no need to change hese, all relative from gitRepoDir
wvdefsFilePath = os.path.join(gitRepoDir,'software','nvacq','instrWvDefines.h')
acodeaDefsFilePath  = os.path.join(gitRepoDir,'software','nvpsg','ACode32.h')

triggerDurAtEvent = None

def tsplit(s, sep):
    stack = [s]
    for char in sep:
        pieces = []
        for substr in stack:
            pieces.extend(substr.split(char))
        stack = pieces
    return stack

def readWVDefines(filename):
    """getEthersList - Obtain the Controllers Names from the /etc/ethers files"""
    WvEvents = {}
    file=filename # #os.path.join(os.path.sep,'etc','ethers')
    # print file
    #if ( os.path.exists(file) == False ) :
    #   logger.debug("Ethers file: " + file + " - Not present.")
    #   return hostlist

    inFile = open(file, 'rb')
    for line in inFile:
        # print line
        # logger.debug(line)
        # skip blank or commented '#' lines
        if (line.startswith('#define') and ("EVENT_" in line)) :
           line = line.strip(' \n')
           #print 'wvEvent Line: ' + line
           extractlist = tsplit(line, (' ', '\t','\n' ) )
           # extractlist = re.split(' |\t|\n',line)
           # print len(extractlist)
           length = len(extractlist)
           # print extractlist
           eventname = extractlist[1]
           value = extractlist[length-1]
           # print value
           if (value.isdigit()):
              # print int(value)
              ival = int(value)
              #print "event: %s, value: %d" % (eventname,  ival)
              WvEvents[ival] = eventname
              
    return WvEvents

def readAcode_file(filename):
    """getEthersList - Obtain the Controllers Names from the /etc/ethers files"""
    AcodeDic = {}
    file=filename # #os.path.join(os.path.sep,'etc','ethers')
    # print file
    #if ( os.path.exists(file) == False ) :
    #   logger.debug("Ethers file: " + file + " - Not present.")
    #   return hostlist

    inFile = open(file, 'rb')
    for line in inFile:
           # use line only starting with #define  and have ACDKEY within them
           if (line.startswith('#define') and ('ACDKEY' in line)):
              line = line.strip(' \n')  # removecarrage returns, white spaces
              #print
              #print "Acode line: " + line
              #print line.split()
              list = line.split()
              if (len(list) < 5):
                 continue
              #print list[2]
              #print list[2].strip('(')
              #print list[4]
              #print list[4].strip(' )')
              #print tsplit(line, (' ', '\t','\n','(',')','|' ) )
              name = list[1].strip()
              value = list[4].strip(' )')
              ival = int(value)
              # print "Acode:  '%s' - '%s'" % (name,value)
              #print "Acode:  '%s' - '%d'" % (name,ival)

              AcodeDic[ival] = name

    return AcodeDic

#
# read the CSV file generated by WIndRivers WindView aka System Viewer
# decode our custom WindView Events
#
def readWV_CSV_file(filename):
    previousTime = 0.0
    diftime = 0.00
    previousLine = ""
    previousDurTime = 0.00;
    totalDuration = 0.00
    startTime = 0.00
    runningTime = 0.00
    # triggerDurAtEvent = "MRIUSERBYTE"
    triggered = 1
    file=filename 
    # print file
    #if ( os.path.exists(file) == False ) :
    #   logger.debug("Ethers file: " + file + " - Not present.")
    #   return hostlist

    # print " %18s  %12s %21s %10s %17s %17s" % ( 'State Name','Context','Event Id','TimeStamp','Delta Time',' ???? ')
    logger.info("Trigger: %s\n"  % (triggerDurAtEvent))
   #  previousLine = " %27s  %17s %21s %8d %15.10fs %15.10fms %15.10fus %17.10fus " % ( state,context,ename,ieventId,ftime,runningTime,diftime,totalDuration)
    logger.info(" %27s %17s %21s %10s %15s %17s %17s %19s %18s" % ('State Name','Context','Event Name','Event Id','TimeStamp','Running Time','Delta Time','Trigger Duration','Exec Duration'))
    inFile = open(file, 'rb')
    for line in inFile:
           line = line.strip(' \n')  # removecarrage returns, white spaces
           # print line
           # logger.debug(line)
           # skip blank or commented '#' lines
           if ( ('State Name' in line) or (line == "") ):
              continue

           # print "WV Line: " + line
           (state,context,name,eventID,time,pars) = line.split('",',5)
           state = state.strip(' "');
           context = context.strip(' "');
           name = name.strip(' "');
           eventID = eventID.strip(' "');
           ieventId = int(eventID)
           time = time.strip(' "');
           ftime = float(time)
           if (startTime == 0.00):
             startTime = ftime

           if ((ieventId > 40000) and (ieventId < 66000)):   # range of valid User Event IDs
              # print "UserEvent:  '%s' '%s' '%s' '%s' '%s' '%s'" % ( state,context,name,eventID,time,pars)
              userId = ieventId - 40000
              if (userId >= 1000) and (userId <= 1999):    # Acode Range
                 # print "Acode Decode: %d  '%s'" % ( (userId - 1000), AcodeDic[userId-1000])
                 ename = AcodeDic[userId-1000]
              elif (userId >= 2000) and (userId <= 2099):
                 # print "MRIByteCntDwn: %d" % ( (userId - 2000) )
                 ename = "MRIByteCntDwn: " + str(userId - 2000)
              # The below are custom, for debugging a readMRIUserByte problem, maybe change to suit needs
              elif (userId >= 3000) and (userId <= 3999):
                 ename = "OBLPESHAP Itr: " + str(userId - 3000)
              elif (userId >= 4000) and (userId <= 4999):
                 ename = "OBLPESHAP wrds: " + str(userId - 4000)
              elif (userId >= 5000) and (userId <= 5999):
                 ename = "Pending DMA: " + str(userId - 5000)
              elif (userId >= 6000) and (userId <= 6999):
                 ename = "MARK: " + str(userId - 6000)
              elif (userId >= 10000) and (userId <= 19999):
                 ename = "Wrds in FIFO: " + str(userId - 10000)
              elif (userId >= 20000) and (userId <= 29999):
                 ename = "Wrds in Bufr: " + str(userId - 20000)
              else:
                 # print "User Event: %d  - '%s'" % (userId,wvevdic[userId])
                 try :
                     ename = wvevdic[userId].lstrip('EVENT_')
                 except KeyError as e:
                     ename = "User"+str(userId)
           else:
              ename = name

           #if triggered == 0 :
           #if  triggerDurAtEvent in ename :
           #    totalDuration = 0.00
           #    triggered = 1
           if ( previousTime != 0.00):
              diftime = (ftime - previousTime) * 1000000.00
             
           # print "ftime: %15.10fs prevTime: %15.10fs, diftime: %15.10fus" %(ftime,previousTime,(ftime - previousTime))
           # print " %18s  %12s %21s %8d %15.10fs %15.10fus %s" % ( state,context,ename,ieventId,ftime,diftime,pars)
           #print "\nprevTime:  %15.10fs, prevDur: %15.10f " % ( previousTime, previousDurTime )
           #print "Previne: " + previousLine + " %15.10fus " % (diftime)
           #print "CUrrent: " +" %18s  %12s %21s %8d %15.10fs %15.10fus " % ( state,context,ename,ieventId,ftime,diftime)
           #print previousLine + " %15.10fus " % (diftime)
           if ( previousLine != "" ):
              logger.info(previousLine + " %15.10fus " % (diftime))

           #previousLine = " %18s  %12s %21s %8d %15.10fs %15.10fus " % ( state,context,ename,ieventId,ftime,diftime)
           # print previousLine + " %15.10fus " % (previousDurTime)
           trigmark=''
           if  triggerDurAtEvent in ename :
               trigmark='*'
               totalDuration = 0.00
           runningTime = (ftime - startTime) * 1000.0
           previousLine = " %27s  %17s %21s %8d %15.10fs %15.10fms %15.10fus %17.10fus " % ( (trigmark+state),context,ename,ieventId,ftime,runningTime,diftime,totalDuration)
           previousTime = ftime;
           previousDurTime = diftime;
           #if  triggerDurAtEvent in ename :
           #    totalDuration = 0.00
           if triggered == 1 :
              totalDuration = totalDuration + diftime;
    return 

#
# traverse a list of lists, etc. 
#
def traverse(o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        for value in o:
            for subvalue in traverse(value):
                yield subvalue
    else:
        yield o


#
if __name__ == "__main__":

    dateTime = datetime.datetime.today()
    datetimestr = dateTime.strftime("%Y-%m-%d:%H:%M:%S")

    parser = OptionParser()
    parser.add_option("-f", "--file", dest="filename",
                  help="Logging file name", metavar="FILE")
    parser.add_option("-t", "--trigger", dest="triggerEventName",
                  help="Event Trigger Name", metavar="EventName", default="MRIUSERBYTE")
    parser.add_option("-d", "--debug",
                  action="store_true", dest="verbose", default=False,
                  help="print debugging output to stdout")

    (options, args) = parser.parse_args()
    print options
    print args

    triggerDurAtEvent = options.triggerEventName

    # arglist is going to be a lists of lists
    arglist = []
    for argitem in args:
        arglist.append(argitem.split(','))


    # travarse the list of lists creating a simple list of all targeted controller
    targets = []
    for cntlr in traverse(arglist):
       targets.append(cntlr)
    print targets


    console_formatter = logging.Formatter('%(message)s')
    consolelog_formatter = logging.Formatter('%(message)s')
    # consolelog_formatter = logging.Formatter('%(asctime)-6s: %(message)s','%m-%d %H:%M:%S')
    #debug_formatter = logging.Formatter(
    #   '[%(asctime)s] {%(filename)s:%(lineno)d:%(funcName)s} %(levelname)s - %(message)s','%m-%d %H:%M:%S')

    consoleLogger = logging.StreamHandler()
    consoleLogger.setLevel(logging.INFO)
    consoleLogger.setFormatter(console_formatter)
    logging.getLogger('').addHandler(consoleLogger)

    # generate log file name based on input file name
    #if ( options.loggingFilename == None):
    #    loggingFilename = 'WvDecoder_' + datetimestr + '.log'
    #else:
    #    loggingFilename = options.loggingFilename + '_' + datetimestr + '.log'

    loggingFilename = targets[0] + '_decode_' + datetimestr + '.log'
    fileLogger = logging.FileHandler(filename=loggingFilename)
    fileLogger.setLevel(logging.INFO)
    fileLogger.setFormatter(consolelog_formatter)
    logging.getLogger('').addHandler(fileLogger)

    #if (options.debugOutput):
    #   debugLogger = logging.FileHandler(filename='verifyCntlrsFlash_Debug_' + datetimestr + '.log')
    #   debugLogger.setLevel(logging.DEBUG)
    #   debugLogger.setFormatter(debug_formatter)
    #   logging.getLogger('').addHandler(debugLogger)

    logger = logging.getLogger('WvDecoder logger')
    logger.setLevel(logging.DEBUG)

    logger.info(" ")
    logger.info(" ------ " + datetimestr + " ------- ")
    logger.info(" ")
    logger.info('Log file: "%s"' % (loggingFilename))
    logger.info(" ")

    #s = 'thing1,thing2/thing3-thing4'
    #print re.split(',|/|-', s)

    #tsplit(s, [',', '/', '-'])

    # read and parse the wvEvent User defines
    # file = os.path.join(os.path.sep,'home','greg','workspace','master','git-repo','software','nvacq','instrWvDefines.h')
    wvevdic = readWVDefines(wvdefsFilePath)
    #print wvevdic

    # read and parse the Acode User defines
    # acodefile = os.path.join(os.path.sep,'home','greg','workspace','master','git-repo','software','nvpsg','ACode32.h')
    AcodeDic =readAcode_file(acodeaDefsFilePath)

    print targets[0]
    readWV_CSV_file(targets[0])

