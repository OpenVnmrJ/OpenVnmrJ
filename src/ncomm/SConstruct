#

import os
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import buildMethods

platform = sys.platform

# define target file names
ncommStaticTarget   = 'libncomm.a'
ncommSharedTarget   = 'libncomm.so'
acqcommStaticTarget = 'libacqcomm.a'
acqcommSharedTarget = 'libacqcomm.so'

if (platform=="darwin"):
    ncommSharedTarget  = 'libncomm.dylib'
    acqcommSharedTarget = 'libacqcomm.dylib'
    
# we need to specify an absolute path so this SConstruct file 
# can be called from any other SConstruct file
cwd = os.getcwd()

# source files
ncommFileList = ['mfileObj.c',
                 'errLogLib.c',
                 'hhashLib.c',
                 'ipcKeyDbm.c',
                 'ipcMsgQLib.c',
                 'semLib.c',
                 'msgQLib.c',
                 'asyncIo.c',
                 'eventHandler.c',
                 'eventQueue.c',
                 'listObj.c',
                 'sendAsync.c',
                 'shrMLib.c']

chanlibFileList = ['chanLib.c',
                   'sockets.c',
                   'signals.c',
                   'fdmask.c']

expprocPath     = os.path.join(cwd, os.pardir, 'expproc')
expprocHdrList  = ['expQfuncs.h',
                   'hostMsgChannels.h',
                   'shrstatinfo.h',
                   'shrexpinfo.h']
expprocFileList = ['expQfuncs.c',
                   'statfuncs.c']

vnmrPath     = os.path.join(cwd, os.pardir, 'vnmr')
vnmrHdrList  = ['acquisition.h',
                'comm.h',
                'variables.h']
vnmrFileList = ['comm.c',
                'socket.c',
                'socket1.c']

psgPath     = os.path.join(cwd, os.pardir, 'psg')
psgFileList = ['convertapbout.c']

vwacqPath    = os.path.join(cwd, os.pardir, 'vwacq')
vwacqHdrList = ['hostAcqStructs.h']

# build environment
env = Environment(CCFLAGS    = '-fPIC -c -Wall -O -m32',
                  CPPDEFINES = ['LINUX', 'NESSIE', 'USE_HTONS'],
                  LINKFLAGS  = '-m32',
                  CPPPATH    = [cwd])
if ('darwin' in platform):
    env.Replace(CC = 'clang')
    env.Append(CPPDEFINES = ['MACOS','NOASYNC'])
    env.Replace(CCFLAGS = '-Os -arch x86_64 -fPIC')
    env.Replace(CPPFLAGS = '-Wall -Wno-format-security -Wno-return-type -mmacosx-version-min=10.8')

if ('interix' in platform):
   interixgcc= os.path.join(os.sep,'opt','gcc.3.3','bin','gcc')
   interixar= os.path.join(os.sep,'opt','gcc.3.3','bin','ar')
   env.Replace( CCFLAGS = '-Wall -O -m32' )
   env.Replace( CC=interixgcc )
   env.Replace( LINK=interixgcc )
   env.Replace( SHLINK=interixgcc )
   env.Replace( AR=interixar )
   env.Replace(  LINKFLAGS='-O -m32' )
   env.AppendUnique(  CPPDEFINES=[ 'ULONG','_ALL_SOURCE','__INTERIX','NOACQ','USE_HTONS','NESSIE','LINUX','SUN','NO_WIN_MMAP']  )
   env.Replace(  CPPPATH= [ cwd,  
                  os.path.join(cwd, os.pardir, os.pardir,'3rdParty', 'jdk1.6.0_12', 'include'),
                  os.path.join(cwd, os.pardir, os.pardir,'3rdParty', 'jdk1.6.0_12', 'include','linux') ] ),


   env.AppendUnique(  CPPPATH=[ '/usr/include','/usr/X11R6/include/']  )
   env.Append(  LIBPATH=[ os.path.join(os.sep, 'usr','lib','x86'), os.path.join(os.sep, 'usr'
,'lib') ]  )


buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, expprocPath, expprocFileList)
buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, expprocPath, expprocHdrList)
buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, vnmrPath, vnmrFileList)
buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, vnmrPath, vnmrHdrList)
buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, psgPath, psgFileList)
buildMethods.makeSymLinks(env, acqcommStaticTarget, cwd, vwacqPath, vwacqHdrList)

# aggregated file lists
libncommList    = ncommFileList + chanlibFileList
outsideFileList = vnmrFileList + expprocFileList + psgFileList
libacqcommList  = libncommList + outsideFileList

# actual builds
ncommStatic = env.StaticLibrary(ncommStaticTarget, [libncommList])
if ('darwin' not in platform) and ('interix' not in platform):
    ncommShared = env.SharedLibrary(ncommSharedTarget, [libncommList])

if (platform=="darwin"):
    ncommSharedPath = os.path.join(os.sep, 'vnmr', 'lib', ncommSharedTarget)
    env.Replace(LINKFLAGS = ['-install_name',ncommSharedPath,'-undefined','dynamic_lookup'])
    ncommShared = env.SharedLibrary(ncommSharedTarget, [libncommList])
    
acqcommStatic = env.StaticLibrary(acqcommStaticTarget, [libacqcommList])
if ('darwin' not in platform) and ('interix' not in platform):
    acqcommShared = env.SharedLibrary(acqcommSharedTarget, [libacqcommList])

if (platform=="darwin"):
    acqcommSharedPath = os.path.join(os.sep, 'vnmr', 'lib', acqcommSharedTarget)
    env.Replace(LINKFLAGS = ['-install_name',acqcommSharedPath,'-undefined','dynamic_lookup'])
    acqcommShared = env.SharedLibrary(acqcommSharedTarget, [libacqcommList])

# define with absolute path where built files will be copied
vnmrPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'lib')

# make sure the path(s) exist
if not os.path.exists(vnmrPath):
   os.makedirs(vnmrPath)

# actions to be performed after targets are built
env.AddPostAction(ncommStatic,
                  Action(Copy(vnmrPath, os.path.join(cwd, ncommStaticTarget))))
if ('interix' not in platform):
    env.AddPostAction(ncommShared,
                  Action(Copy(vnmrPath, os.path.join(cwd, ncommSharedTarget))))
env.AddPostAction(acqcommStatic,
                  Action(Copy(vnmrPath, os.path.join(cwd, acqcommStaticTarget))))
if ('interix' not in platform):
    env.AddPostAction(acqcommShared,
                  Action(Copy(vnmrPath, os.path.join(cwd, acqcommSharedTarget))))

