#!

import os
import sys

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

# import build options 'bo'
# get options settings, use parameter to determine NDDS 3x, 4x, 4.2d varients
execfile(os.path.join(cwd, os.pardir, os.pardir, 'scripts', 'buildoptions.py'))
ovjtools = bo.OVJ_TOOLS
import buildMethods

#import variables  and environment from SConstruct
Import("*")

# define target file names
nvSendProcTarget = 'Sendproc'

javaPath = os.path.join(ovjtools, 'java', 'bin')

print 'nvSendproc NDDS_VERSION ' + boEnv['NDDS_VERSION']

# binary paths
#if 'Sendproc4x' in COMMAND_LINE_TARGETS:
#  generate NDDS home path from NDDS_VERSION
nddsdir = 'ndds.' + boEnv['NDDS_VERSION']
print 'Compiling NDDS ' + boEnv['NDDS_VERSION'] + ' Version, insure that a clean was done prior to this'
   ## 4x NDDS
nvSendProcTarget = 'Sendproc'
nddsHome = os.path.join(ovjtools, 'NDDS', nddsdir)
nddsGen = 'cd ' + cwd + ' && ' + os.path.join(nddsHome, 'scripts', 'nddsgen')
nddsJreBin = os.path.join(nddsHome, 'jre', 'i86Linux','bin')

#  ndds header paths
nddsHdrPathUnix = os.path.join(nddsHome, 'include')
nddsHdrPathShare = os.path.join(nddsHome, 'include', 'ndds')

#  NDDSGEN options
nddsOpts = ' -language C -notypecode -replace '

# libraries and paths
#  nddsLibPath = os.path.join(nddsHome, 'lib', 'i86Linux2.6gcc3.4.3')
nddsLibVer = boEnv['NDDS_LIB_VERSION']
nddsLibPath = os.path.join(nddsHome, 'lib', nddsLibVer )
LibList = [ 'pthread', 'nddscz', 'nddscorez', 'dl' ]

# local source files
nvSendProcPath     = os.path.join(cwd, os.pardir, '.')
nvSendProcFileList = ['barrier.c',
                      'nddsbufmngr.c',
                      'nddsfuncs.c',
                      'sendfuncs.c',
                      'threadfuncs.c',
                      'sendproc.c']

#
#  header and source files that reside outside this directory
#
sendProcPath     = os.path.join(cwd, os.pardir, 'sendproc')
sendProcFileList = ['sendcmds.c']

nvRecvProcPath     = os.path.join(cwd, os.pardir, 'nvrecvproc')
nvRecvProcHdrList = [ 'rngBlkLib.h' ]
nvRecvProcFileList = ['rngBlkLib.c']

ncommPath     = os.path.join(cwd, os.pardir, 'ncomm')
ncommHdrList =	[ 'errLogLib.h',
                  'hhashLib.h',
                  'ipcKeyDbm.h',
                  'ipcMsgQLib.h',
                  'listObj.h',
                  'mfileObj.h',
                  'msgQLib.h',
                  'semLib.h',
                  'shrMLib.h',
                  'sockets.h']
ncommFileList = ['errLogLib.c',
                 'hhashLib.c',
                 'ipcKeyDbm.c',
                 'ipcMsgQLib.c',
                 'listObj.c',
                 'mfileObj.c',
                 'semLib.c',
                 'msgQLib.c',
                 'fdmask.c',
                 'shrMLib.c']

nvExpProcPath     = os.path.join(cwd, os.pardir, 'nvexpproc')
nvExpProcFileList = ['HBthread.c',
                     'exceptHandler.c']

expProcPath     = os.path.join(cwd, os.pardir, 'expproc')
expProcHdrList = [ 'expentrystructs.h',
                    'expQfuncs.h',
                    'hostMsgChannels.h',
                    'shrexpinfo.h',
                    'parser.h' ]
expProcFileList = ['parser.c',
                   'daemon.c']

nvacqPath     = os.path.join(cwd, os.pardir, 'nvacq')
nvacqHdrList = [ 'crc32.h',
                 'NDDS_Obj.h',
                 'NDDS_PubFuncs.h',
                 'NDDS_SubFuncs.h' ]
nvacqFileList = ['crc32.c',
                 'sysUtils.c',
                 'NDDS_Obj.c',
                 'NDDS_PubFuncs.c',
                 'NDDS_SubFuncs.c']

vwacqPath     = os.path.join(cwd, os.pardir, 'vwacq')
vwacqHdrList = [ 'rngLLib.h',
                 'hostAcqStructs.h' ]
vwacqFileList = ['rngLLib.c']

nddsFileList = [ 'Codes_Downld',
               ]

#                 'App_HB']

nddsIdlFileList = [ 'Codes_Downld.idl',
                  ]
#                    'App_HB.idl']

# the order of the elements within the next two
# lists must be the match
# if 'Sendproc4x' in COMMAND_LINE_TARGETS:
nddsCFileList = [ 'Codes_Downld.c',
                     'Codes_DownldPlugin.c',
                     'Codes_DownldSupport.c',
                   ]
                   #  'App_HB.c',
                   #  'App_HBPlugin.c',
                   #  'App_HBSupport.c']

nvPsgPath = os.path.join(cwd, os.pardir, 'nvpsg')
nvPsgHdrList = ['lc.h',
                'PSGFileHeader.h']

# build environment
nvSendProcEnv = Environment(CCFLAGS    = '-m32 -O',
                            CPPDEFINES = ['LINUX', 'NODUMMY', 'RTI_UNIX',
                                          'NIRVANA', 'DEBUG'],
                            LINKFLAGS  = '-m32',
                            CPPPATH    = [cwd,
                                          nddsHdrPathUnix,
                                          nddsHdrPathShare])

#buildMethods.symLinkNow(nvSendProcEnv, cwd, nvacqPath, nddsIdlFileList)
#buildMethods.symLinkNow(nvSendProcEnv, cwd, nvacqPath, nddsXFileList)

# if 'Sendproc4x' in COMMAND_LINE_TARGETS:
nvSendProcEnv.Append(CPPDEFINES = 'RTI_NDDS_4x')


# define Builders
nddsBld = Builder(action = 'export NDDSHOME; NDDSHOME=' + nddsHome + '; ' + \
                           nddsGen + ' ' + \
                           '-replace ' + '$SOURCES.file')

nvSendProcEnv.Append(BUILDERS = {'NddsGen' : nddsBld})


buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvPsgPath, nvPsgHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, sendProcPath, sendProcFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, ncommPath, ncommHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, ncommPath, ncommFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvExpProcPath, nvExpProcFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, expProcPath, expProcHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, expProcPath, expProcFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvRecvProcPath, nvRecvProcHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvRecvProcPath, nvRecvProcFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvacqPath, nvacqHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, nvacqPath, nvacqFileList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, vwacqPath, vwacqHdrList)
buildMethods.makeSymLinks(nvSendProcEnv, nvSendProcTarget, cwd, vwacqPath, vwacqFileList)


nvsendproc = nvSendProcEnv.Program(target  = nvSendProcTarget,
                                   source  = [nvSendProcFileList,
                                              sendProcFileList,
                                              nvExpProcFileList,
                                              expProcFileList,
                                              nvRecvProcFileList,
                                              ncommFileList,
                                              nvacqFileList,
                                              nddsCFileList,
                                              vwacqFileList],
                                   LIBPATH = [cwd,
                                              nddsLibPath],
                                   LIBS    = [ LibList ] )

# define with absolute path where built files will be copied
vnmrPath = os.path.join(bo.prefix, 'console', 'ddr', 'acqbin')

# make sure the path(s) exist
if not os.path.exists(vnmrPath):
   os.makedirs(vnmrPath)

# actions to be performed after targets are built
nvSendProcEnv.AddPostAction(nvsendproc,
                          Action(Copy(os.path.join(vnmrPath,'Sendproc'), os.path.join(cwd, nvSendProcTarget))))

