
*******************************************************************************
chmod(octal_mode,<fileName>):$res	- 	change mod bits for a file or directory
chmod(mode,<fileName>):$res	- 	change mod bits for a file or directory
*******************************************************************************

  This command is similar to the Linux chmod command. It has a few less options.
  It can be used in two styles. In the first style, an "octal_mode" is provided
  as the first argument. This numeric mode consists of three digits from 0 to 7.
  This second argument is the name of the file or directory that will have its
  mode set. Examples of this style are

    chmod(666,'filea')
    chmod(755,'dira') 

  The second style uses uses symbolic characters to set the mod bits. The form is
  [ugoa][+-][rwx]
  The characters in the first group define the set of file owners.
    u: user permissions
    g: group permissions
    o: other permissions
    a: all permissions. This is the same as 'ugo'
  One or more of these characters may be used.

  The + and - characters in the second group define whether the permissions are
  turned on or off, respectively.

  The characters in the third group define the permissions to be set.
    r: read permission
    w: write permission
    x: execute permission
  One or more of these characters may be used.

  In this style, the mode definition may be preceded with a -R to recursively
  set to modes. In this case, the second argument must be the name of a directory.
  Examples of this style are

    chmod('g+w','filea')
    chmod('ug+rw','filea')
    chmod('-R a+w','dira')

  The chmod command will return a 1 for success.
  The chmod command will return a 0 for failure.
