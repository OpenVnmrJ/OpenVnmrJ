
*******************************************************************************
clradd<:$stat,$message>	-	clear the add/subtract experiment
clradd<('keep',numFid)><:$stat,$message> - clear the add/subtract experiment
                                           but keeping the specified number
                                           of FIDs

jaddsub -       join the add/subtract experiment

add<(multiplier <,'new'>)>  - add the current FID to the add/subtract experiment
sub<(multiplier <,'new'>)>  - subtract the current FID from the add/subtract
                              experiment
add<(multiplier <,'trace',index>)>  - add the current FID to the "index" element
                                      in the add/subtract experiment
sub<(multiplier <,'trace',index>)>  - subtract the current FID from the "index"
                                      element in the add/subtract
add<(multiplier <,'newtrace',index>)>  - replace the "index" element in the
                                      add/subtract experiment with the current FID
sub<(multiplier <,'newtrace',index>)>  - replace the "index" element in the
                                      add/subtract experiment with the negative 
                                      of the current FID
addsubexp - global integer identifying the add/subtract experiment
            The default is 5
*******************************************************************************

"clradd" deletes the add-subtract experiment. The add-subtract experiment
number is defined by the global addsubexp parameter. The clradd program uses
the delexp command to delete the add-subtract experiment. It takes the same
return values as the delexp command. These can be used to suppress messages.
See the manual for delexp to a description of the return values.

clradd('keep',numFids) will remove FIDs from the addsub experiment, keeping
the number specified. For example, if the addsub experiment was an arrayed
data set with 10 FIDs, clradd('keep',1) would delete FIDs 2-10. If, for example,
you wanted to keep FIDs 4 and 6 from the original 10, the following would
be required
  select(4)
  add('newtrace',1)   // this replaces FID 1 with FID 4
  select(6)
  add('newtrace',2)   // this replaces FID 2 with FID 6
  clradd('keep',2)    // this keeps the first 2 FIDs, deleting 3-10
clradd('keep',numFIDs):$stat,$msg will set $stat=1 if it succeeds, 0 if it fails.
The $msg will contain the message.  The 'keep' option has the side-effect
of scaling the FID data and converting it to floating point. This removes the
need to do the scaling and conversion every time an add/sub operation is done.
The command clradd('keep',arraydim) will convert the entire FID data set.

Note that the addsubexp parameter can be the same as the currently joined
experiment. In this case, the clradd command cannot be used since that
would cause the current experiment to be deleted. Using add or sub with
addsubexp set to the current experiment will work as described below.

"jaddsub" joins the add-subtract experiment, as defined by the global
addsubexp parameter. jaddsub will create this parameter if it does not exist,
and set it to a default value of 5. jaddsub with an argument, as in
jaddsub('silent') will not clear the graphics, text window, or menu system.
It does not matter what the argument is.

The last displayed or selected FID is added to ("add") or subtracted
from ("sub") the current contents of the add/subtract experiment.
An optional argument allows the FID to be first multiplied by a 'multiplier'.
The FID data are divided by the number of time averages of the data, reflected
in the parameter ct.  To get unscaled data, use a multiplier of ct.
The parameters lsfid and phfid may be used to shift or phase rotate the
selected FID before it is combined with the data in the add/subtract experiment.
The add and sub commands use the cexp command to create the add-subtract experiment.
They take the same return values as the cexp command. These can be used to
suppress messages.  See the manual for cexp to a description of the return values.

A multi-fid add/subtract experiment may be created with the add or sub command.
The optional argument 'new' will create a new FID element in the add/subtract
experiment.  For example,  the commands clradd select(1) add from some
experiment will create the add/subtract experiment with a single FID in it.
If the next commands typed are select(2) add,  then a single FID which is
the sum of the original FIDs one and two will be made in the add/subtract
experiment.  If, on the other hand,  the commands select(2) add('new')
were typed,  then the add/subtract experiment will contain an array
of two FIDs corresponding to the original FIDs one and two, respectively.
One detail is that the arraydim parameter may need to be updated after
constructing a multi-fid add/subtract experiment.  The recipe for doing
this is to join the add/subtract experiment (jaddsub) and enter
 setvalue('arraydim',<num>,'processed')
where <num> is replaced by the number of FIDs in that experiment.
For example, if twelve FIDs were put into the add/subtract experiment,
one would enter
 setvalue('arraydim',12,'processed')

Individual FIDs in a multi-fid add/subtract experiment may subsequently be added
to and subtracted from.  The add and sub command without a 'trace' argument
will add or subtract from the first FID in the add/subtract experiment.
Adding the 'trace' argument followed by a required index number will select
another FID to be the target of the add/subtract.  For example, select(4)
add('trace',6) will take the fourth FID from the current experiment and add
it to the sixth FID in the add/subtract experiment.  When using the 'trace'
argument, the index must be between 1 and one greater than the current
number of FIDs in the add/subtract experiment. If the 'trace' index is
one greater than the current number of FIDs in the add/subtract experiment,
it is equivalent to using the 'new' argument.

The 'newtrace' argument is same same as the 'trace' argument except that
the data in the current trace is replaced with the new data.

If the target FID is a link to another file, which happens if the data are
returned to an experiment with the rt command, the links will be removed so
that the previously linked FID file is not modified.


Examples
           clradd:$stat,$message
           add:$stat,$message
           sub(0.75)
           add('new')
           add('trace',2)
           add('newtrace',2)
