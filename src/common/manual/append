
*******************************************************************************
append(fromFile,<filters>,toFile)  - append the contents of fromFile to toFile.
appendstr(fromString,<filters>,toFile)  - append the string fromString to toFile.
*******************************************************************************

The append command will append the contents of "fromFile" to "toFile".
The fromFile and toFile cannot be the same file. If toFile does not exist,
it will be created. This is like the Linux command
  cat fromFile >> toFile

The appendstr command will append the string "fromString" to "toFile".
The '\n' character in a string will be treated as a new line.
If toFile does not exist, it will be created. This is like the Linux command
  echo "fromString" >> toFile

There can be optional tests to determine if a given line from fromFile or fromString
will be appended. These filters take the form of a keyword test and a test phase.
In the case of 'sed', 'sed g', and 'tr', two arguments are required. All options apply
for both append and appendstr.  The following filters are available

'grep',<search phrase>       - if a given line contains the <search phrase>, it
                             will be appended to toFile

'grep -v',<search phrase>    - if a given line contains the <search phrase>, it
                             will not be appended to toFile

'grep -w',<search word>      - if a given line contains the <search word>, it
                             will be appended to toFile

'grep -vw',<search word>     - if a given line contains the <search word>, it
                             will not be appended to toFile

'awk',<format>               - replace the line with the format string. Words
                             from the original line are available at $1, etc.
                             $0 represents the entire line.

'sed',<regexp>,<replacement> - Match <regexp> and replace it with the <replacement>
                               This is like the sed -e 's/regexp/replacement/' command
                               in Linux.

'sed g',<regexp>,<replacement> - Globally match <regexp> and replace it with the
                               <replacement>
                               This is like the sed -e 's/regexp/replacement/g' command
                               in Linux.

'tr',<chars>,<replacement> -   Translate or delete the characters that match
                               those in <chars>.  The newline, linefeed, or tab characters
                               may be specified in <chars> by using \n, \r, or \t
                               respectively.  If <replacement> is a single character,
                               the characters matching those in <chars> will be replaced.
                               If <replacement>  is a null string, the characters
                               matching those in <chars> will be deleted.
                               This is similar to the "tr" command in Linux.

'head',<count>               - Only append the top <count> number of lines

'tail',<count>               - Only append the last <count> number of lines

'tail','+<count>'            - Append lines starting from line <count>. If the
                             +<count> is used, it must be enclosed in single
                             quotes, as in '+5'

If the <search phase> or <search word> starts with the '^' character, the match
must occur at the beginning of the line.

The 'head' and 'tail' filters can each only be used once in a single call to append.
The awk, sed, grep filters may be used multiple times.

If toFile is '|wc', instead of appending the lines at a file, the number of
lines that would have been written can be returned to the calling macro. This is a
way of getting line counts. If additional return variables are given,  then one
can return to the calling macro the lines that would have been appended. For example,
append(<fromFile>,'grep','something','grep -v'.'something else','|wc'):$num,$line1,$line2,...

If toFile is '|wc c', it is exactly like using '|wc' except that the number of words,
rather than the number of lines, is returned.

Following are some examples of shell calls and the
equivalent append calls. If lines are appended to toFile, then append will return
either a 1 or 0 for success or failure, respectively.

shell('cat <fromFile> >> <toFile>')
can be replaced with
append(<fromFile>,<toFile>)

shell('cat <fromFile> | wc -l'):$num
can be replaced with
append(<fromFile>,'|wc'):$num

shell('cat <fromFile> | grep "test a" | grep -v "test b" >> <toFile>')
can be replaced with
append(<fromFile>,'grep','test a','grep -v','test b',<toFile>)

shell('cat <fromFile> | grep "test a" | grep -v "test b" | wc -l'):$num
can be replaced with
append(<fromFile>,'grep','test a','grep -v','test b','|wc'):$num

shell('cat <fromFile> | grep "test a" | grep -v "test b" | wc -w'):$num
can be replaced with
append(<fromFile>,'grep','test a','grep -v','test b','|wc w'):$num

shell('echo '+$1+' | grep "test a" | grep -v "test b" | wc -w'):$num
can be replaced with
appendstr($1,'grep','test a','grep -v','test b','|wc w'):$num,$newString

shell('cat <fromFile> | grep "test a" | head -n 10 | tail -n 3 >>  <toFile>')
can be replaced with
append(<fromFile>,'grep','test a','head','10','tail','3',<toFile>):$ok

shell('echo '+$1+' | grep "test a" | head -n 10 | tail -n 3 >>  <toFile>')
can be replaced with
appendstr($1,'grep','test a','head','10','tail','3',<toFile>):$ok

If a file contained lines with two numbers on each line, the following would swap
the order of the two numbers on each line.

append(<fromFile>,'awk','$2  $1',<toFile>)

If <fromFile> contained the phrase "here and here"
append(<fromFile>,'sed','her.','there',<toFile>)
would write "there and here" to <toFile>
append(<fromFile>,'sed g','her.','there',<toFile>)
would write "there and there" to <toFile>
See Linux "man -s 7 regex" for a description of regular expressions that can be used.

If a file is in "dos" format, where lines are terminated with the characters
linefeed - newline, the following behaves effectively like the "dos2unix" command.

append(<fromFile>,'tr','\r','',<toFile>)
