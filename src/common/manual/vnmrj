
******************************************************************
vnmrj	Start the OpenVnmrJ application
sendMessage	Start the OpenVnmrJ application in background
                and provide a message passing interface
exitComm        Exit the OpenVnmrJ application started with
                sendMessage
******************************************************************

The OpenVnmrJ program can be started from a terminal window with the vnmrj command.
Other options are available.

vnmrj icon  // starts OpenVnmrJ but the windows are iconified.
vnmrj hide  // starts OpenVnmrJ but the windows are not visible at all
vnmrj hideNoSplash  // starts OpenVnmrJ but the windows are not visible at all, not even
                    // the splash screen
vnmrj -splash <path_to_splash.png>  // use alternate png file as the splash screen.

The vnmrjcmd command can be used from macros to control the window state.
vnmrjcmd('WINDOW icon')    // iconify the OpenVnmrJ window.
vnmrjcmd('WINDOW normal')  // de-iconify the OpenVnmrJ window
vnmrjcmd('WINDOW hide')    // hide the OpenVnmrJ windows
vnmrjcmd('WINDOW show')    // show the OpenVnmrJ windows

Note that the WINDOW keyword must be capitalized.  If OpenVnmrJ is in
the 'hide' state and a maclib calls something that creates or displays
a popup window, that popup window will appear.

The vnmrj command takes an optional -exec  keyword. The macro following this
keyword will be executed after the OpenVnmrJ starts. It will be executed after
the bootup macro executes. This may be useful if the OpenVnmrJ starts in the
'hide' state, which presents no command line or gui for interaction. The
macro following the -exec argument could initialize things for communication
from outside OpenVnmrJ. The sendMesage macro provides this interface. 

sendMessage
==========

The sendMessage macro will typically be called from a Vnmrbg process.
A Vnmrbg can be executed from a terminal as in

Vnmrbg -mback -n0 "sendMessage(msg)"

If the msg has quotes, the shell interpretation of back quotes becomes a problem.

Vnmrbg -mback -n0 "sendMessage(`doStuff('something')`)" usually complains.
A -s argument for Vnmrbg solves this. It is the name of a macro that will use
the command as an argument. The result is
Vnmrbg -mback -n0 -s sendMessage "doStuff('something')" . Internally, Vnmrbg will
call the "-s" macro with back quotes around the command,
   i.e., sendMessage(`doStuff('something')`)

In the example above, -n0 option caused sendMessage to be executed in "exp0".
This will work as long the sendMessage command does not require "experiment"
parameters. In the example above, it does not.  However, the Vnmrbg command
can call any macro and it may require access to experiment parameters.
It is not always clear which experiments may be "locked" by other OpenVnmrJ
programs. The -n option can also take a - as the value. For example,

Vnmrbg -mback -n- -s sendMessage "doStuff('something')"

This will cause Vnmrbg to will search for an available experiment number (nextexp),
create that new experiment (cexp), join it (jexp), run the command, and then
delete the experiment when it exits.

When sendMessage is called, it checks to see if it has already started an vnmrj
process. If not, it will start one with the invocation

  vnmrj -exec initComm hide

This starts OpenVnmrJ but does not show any windows. The initComm macro
initialize communications so that subsequent calls to sendMessage can send
messages to this OpenVnmrJ process. One can then send arbitrary messages
to the background OpenVnmrJ process, including ones that cause popup windows
to appear. For example,

  Vnmrbg -mback -n- -s sendMessage "config doMyStuff('myArgument')"

To cause the background OpenVnmrJ process to exit, one would call

  Vnmrbg -mback -n- -s sendMessage exitComm

or the equivalent

  Vnmrbg -mback -n- "sendMessage('exitComm')"
