#!

from __future__ import print_function
import os
import sys
import datetime
import shutil

# current working directory
cwd = os.getcwd()

ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
# If not defined, try the default location
    print("OVJ_TOOLS env not found. Trying default location.")
    ovjtools = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'ovjTools')

if not os.path.exists(ovjtools):
    print("OVJ_TOOLS env not found.")
    print("For bash and variants, use export OVJ_TOOLS=<path>")
    print("For csh and variants,  use setenv OVJ_TOOLS <path>")
    sys.exit(1)

# target
dialogTarget = 'dialog.jar'

# MAC -> darwin, Linux -> linux2
platform = sys.platform
# paths
if (platform=="darwin"):
   javaBinDir = os.path.join('/', 'usr', 'bin')
   jarBin = os.path.join(javaBinDir, 'jar')
   if not "JAVA_HOME" in os.environ:
      os.environ['JAVA_HOME'] = os.popen('/usr/libexec/java_home -v 1.8').read()
   jEnv = Environment(ENV = {'PATH' : javaBinDir + ':' + os.environ['PATH'],
                             'JAVA_HOME' : os.environ['JAVA_HOME']})
else:
   javaBinDir = os.path.join(ovjtools, 'java', 'bin')
   jarBin = os.path.join(javaBinDir, 'jar')
   jEnv = Environment(ENV = {'JAVA_HOME' : javaBinDir,
                          'PATH' : javaBinDir + ':' + os.environ['PATH']})

# make sure the path(s) exist
classesPath = os.path.join(cwd, 'classes')
if not os.path.exists(classesPath):
   os.makedirs(classesPath)

# actual builds
srcPath = os.path.join(cwd, 'src')
jEnv.Java(JAVACFLAGS = '-J-mx128m',
          target     = classesPath,
          source     = srcPath)

todaysDate = datetime.datetime.now().strftime("%B %e, %Y %T %Z")
manifestFile = os.path.join(cwd, 'Manifest')
f = open(manifestFile, 'w')
f.write('Manifest-Version: 1.0 ')
f.write(todaysDate)
f.write('\n')
f.write('Main-Class: dialog\n')
f.close()

jarBuildObject = jEnv.Jar(JAR      = jarBin,

                          target   = dialogTarget,
                          source   = [classesPath,
                                      manifestFile],
                          JARCHDIR = classesPath)

# define with absolute path where built files will be copied
vnmrJavaPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'java')
Execute(Mkdir(vnmrJavaPath))

jEnv.AddPostAction(jarBuildObject,
                   Action(Copy(vnmrJavaPath, os.path.join(cwd, dialogTarget))))
