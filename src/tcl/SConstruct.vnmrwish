#

import os
import shutil
import sys

# can be called from any other SConstruct file
cwd = os.getcwd()

ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
# If not defined, try the default location
    print "OVJ_TOOLS env not found. Trying default location."
    ovjtools = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'ovjTools')

if not os.path.exists(ovjtools):
    print "OVJ_TOOLS env not found."
    print "For bash and variants, use export OVJ_TOOLS=<path>"
    print "For csh and variants,  use setenv OVJ_TOOLS <path>"
    sys.exit(1)

# define target file names
vnmrwishTarget = 'vnmrwish'

# library dependancies
ncommPath = os.path.join(cwd, os.pardir, 'ncomm')
SConscript(os.path.join(ncommPath, 'SConstruct'))

# source files
tclCSrcFileList = ['vnmrAppInit.c']

# build environment
env = Environment(CCFLAGS    = '-fPIC -g -c -Wall -O -m32',
                  CPPDEFINES = ['LINUX', 'NESSIE'],
                  LINKFLAGS  = '-m32 -Wl,-rpath,/vnmr/lib',
                  CPPPATH    = [cwd,
                                os.path.join(ovjtools, 'tcl', 'srcTcl'),
                                os.path.join(ovjtools, 'tcl', 'srcTk')])

# actual build
vnmrwish = env.Program(target  = vnmrwishTarget,
                       LIBPATH = [os.path.join(os.sep + 'usr', 'X11R6', 'lib'),
                                  ncommPath,
                                  os.path.join(ovjtools, 'tcl', 'srcTk'),
                                  os.path.join(ovjtools, 'tcl', 'srcTcl'),
                                  os.path.join(os.sep, 'vnmr', 'lib' )],
                       source  = [tclCSrcFileList],
                       LIBS    = ['tk8.4', 'tcl8.4', 'acqcomm', 'X11','m'])

# define with absolute path where built files will be copied
installPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'tcl', 'bin')

# make sure the path(s) exist
if not os.path.exists(installPath):
   os.makedirs(installPath)

# actions to be performed after targets are built
env.AddPostAction(vnmrwish,
                  Action(Copy(installPath, os.path.join(cwd, vnmrwishTarget))))

env.AddPostAction(vnmrwish,
                  Action('ln -sf $TARGET.file vnmrWish', chdir=installPath ))
#
#                 Action('ln -sf vnmrwish vnmrWish', chdir=installPath ))
#
libInstallPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'lib')
if not os.path.exists(libInstallPath):
   os.makedirs(libInstallPath)

env.AddPostAction(vnmrwish,
                  Action(Copy(libInstallPath, os.path.join(ovjtools, 'tcl','srcBlt','libBLT24.so.8.4'))))
env.AddPostAction(vnmrwish,
                  Action('ln -sf libBLT24.so.8.4 libBLT.so', chdir=libInstallPath ))
env.AddPostAction(vnmrwish,
                  Action(Copy(libInstallPath, os.path.join(ovjtools, 'tcl','srcTcl','libtcl8.4.so'))))
env.AddPostAction(vnmrwish,
                  Action(Copy(libInstallPath, os.path.join(ovjtools, 'tcl','srcTk','libtk8.4.so'))))

tklibPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'tcl', 'tklibrary','vnmr')
# make sure the path(s) exist
if not os.path.exists(tklibPath):
   os.makedirs(tklibPath)
tklibList =  [ 'Right',
               'Left',
               'deck.tk',
               'menu2.tk',
             ]
for i in tklibList:
   srcfile = os.path.join(cwd,i)
   dstfile =  os.path.join(tklibPath,i)
   shutil.copyfile(srcfile,dstfile)

tcltkPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'tcl')
Execute('unzip -d '+tcltkPath+ ' -oq '+ os.path.join(ovjtools, 'tcl','tcltk.zip'))

binPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'bin')

# make sure the path(s) exist
if not os.path.exists(binPath):
   os.makedirs(binPath)

srcfile=os.path.join(ovjtools, 'tcl','tclsh')
dstfile=os.path.join(binPath, 'tclsh')
shutil.copyfile(srcfile,dstfile)
os.system('chmod 755 ' + dstfile)
