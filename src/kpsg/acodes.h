/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */
/*
 */
/* ---------- SETUP TYPES FROM PSG, or aliases of GO   -----------------*/
#define GO 0            /* DO NOT CHANGE THESE DEFINES  */
#define SU 1
#define SHIM 2
#define LOCK 3
#define SPIN 4 */
#define CHANGE 5
#define SAMPLE 6

/************************************************************************/
/* apcode op code definitions						*/
/*									*/
/* Documentation added: 3/8/85, values before or changes after not	*/
/* included								*/
/*									*/
/* 	The acodes are to define all operations neccessary to perform 	*/
/* an NMR experiment, i.e. to drive the hardware, etc.			*/
/*	These acodes are generated by 'psg' on the Host computer.	*/
/* The acodes and some other parameter contained in the structure 'lc.h'*/
/* are placed in a common area, that is, common to both the Host and 	*/
/* acquisition CPU. This common area may be a disk or memory, etc. The	*/
/* 'APmon', running on the acquisition CPU, is then notified by	the	*/
/* CPU to retrieve the code.						*/
/*	The 'APmon' retrieves the codes and passes a pointer to these 	*/
/* codes to the 'APint', the interpreter. The 'APint' reads every code	*/
/* one by one and takes the appropriate action. This may be just	*/
/* to increase the pointer value as is the case for a 'NO_OP', or to	*/
/* to manupulate certain values following the a-code, or to take a	*/
/* complete sweep of data, or etc.					*/
/*	When done, or aborted because of bad code/hardware, 'APmon'	*/
/* place the 'acodes + lc.h' and the data back in the common area for	*/
/* the Host computer to interpret.					*/
/************************************************************************/

#define	NO_OP	  0	/* $00 000 a no operation code			*/
#define	CBEGIN	  1	/* $01 001 begin, used only as a NO_OP code	*/
#define	EXIT	  2	/* $02 002 Done with this acode set 		*/
#define	STOP	  3	/* $03 003 stop, unless followed by SETUP (?)	*/
#define	HALT	  4	/* $04 004 halt					*/
#define	CLEAR	  5	/* $05 005 clear data memory,			*/
			/*	   observe signal: size    acodes->dpts	*/
			/*		 	   address acodes->dtst	*/
			/*	   lock signal:	   defined in APint	*/
#define	APBOUT	  6	/* $06 006 send following words to the APbus	*/
			/*	   pars: number-1 of values to send	*/
			/*			the values to send	*/
#define	STFIFO	  7	/* $07 007 start output card fifo if not running */
#define	RFIFO	  8	/* $08 010 reset output card fifo		*/
#define	SFIFO	  9	/* $09 011 stop  output card fifo, leave gates	*/
			/*         quiet. While waiting to stop, check	*/
			/*	   abort				*/
#define	WTFRVT	  11	/* $0B 013 wait certain amount of timne for	*/
			/*         variable temperature to settle	*/
			/*	   The number of seconds to wait is in	*/
			/*	   a long word following the acode.	*/
			/*	   Variable Temp ok if bit set, or char */
			/*	   from port 1 or 2. (Host or diagn)	*/
#define	CKVTR	  12	/* $0C 014 check variable temp. if regulating	*/
#define	CKLOCK	  13	/* $0D 015 check if lock locked			*/
#define	TXPHAS	  14	/* $0E 016 set transmitter phase		*/
#define	SETPHATTR 15	/* $0F 017 set phase attributes for xmitrs	*/
#define	SETPHAS90 16	/* $10 020 st obs or dec 90degree phase lines	*/
#define	SETOPH	  17	/* $11 021 set obs phase index oph		*/
#define	ovprec	  18	/* $12 022 NOT USED **** clear overflow and set prec. */
#define	INIT	  19	/* $13 023 initialize acquisition		*/
#define	BRANCH	  20	/* $14 024 branch routine			*/
			/*         Reset acode pointer to new point	*/
			/*	   Offset in words follows this acode	*/
#define	scales	  21	/* $15 025 s.p. scale routine			*/
#define	scaled	  22	/* $16 026 NOT USED **** d.p. scale routine	*/
#define	acq	  24	/* $18 030 NOT USED **** take data		*/
#define	DECP	  26	/* $1A 032 calc decoupler pattern		*/
#define	INCRFUNC  27	/* $1B 033 inc value			*/
#define	DECRFUNC  28	/* $1C 034 dec value			*/
#define	ADDFUNC	  29	/* $1D 035 add value b to value a	*/
#define	SUBFUNC	  30	/* $1E 036 sub value b from value a	*/
#define	MULTFUNC  31	/* $1F 037 multiply value a * b = c	*/
#define	DIVFUNC	  32	/* $20 040 divide value a / b = c	*/
#define	DBLFUNC	  33	/* $21 041 double value a		*/
#define	HLVFUNC	  34	/* $22 042 halve value a		*/
#define	MODFUNC	  35	/* $23 043 mask value a by value b	*/
#define	MOD2FUNC  36	/* $24 044 mask value a by value b	*/
#define	MOD4FUNC  37	/* $25 045 mask value a by value b	*/
#define	ORFUNC	  38	/* $26 046 or value a or b = c		*/
#define	ASSIGNFUNC 39	/* $27 047 assign value b = value a	*/
#define	IFZFUNC	  40	/* $28 050 test end of loop zero	*/
#define	IFNZFUNC  41	/* $29 051 test end of loop not zero	*/
#define	IFMIFUNC  42	/* $2A 052 test end of loop minus	*/
#define NOISE	  43	/* $2B 053 do noise check			*/
#define acqstart  44	/* $2C 054					*/
#define acqend	  45	/* $2D 055					*/
#define	EVENT1	  46	/* $2E 056 output event to fifo			*/
			/*	   followed by: timing word1		*/
			/*			gate pattern		*/
#define	EVENT2	  47	/* $2F 057 output event to fifo			*/
			/*	   followed by:	timing word1		*/
			/*			gate pattern		*/
			/*			timing word2		*/
			/*	   two word timing allows precision	*/
#define	initstm	  48	/* $30 060 initialize sum-to-memory		*/
#define	autostm	  49	/* $31 061 auto sum-to-memory			*/
#define	setipc	  50	/* $32 062 initialize input card		*/
#define	setopc	  51	/* $33 063 initialize output card		*/
#define	LOADF	  55	/* $37 067 output loadop to fifo		*/
#define	PFLCNT	  56	/* $38 070 put fifoloopcount			*/
#define	APCOUT	  59	/* $3B 073 set xmtr power via rtv or table	*/
#define	ap1out	  60	/* $3C 074 output 1 parameter to analog port	*/
#define	apr4out	  61	/* $3D 075 output 1 value in d4 to analog port	*/
#define	CALL	  62	/* $3E 076 machine lanquage call		*/
			/*         call routine located at the address	*/
			/*	   whose offset from the acode-pointer	*/
			/*	   follows this acode (relative address)*/
#define SETVT	  63	/* $3F 077 Set Oxford VT controller 7/8/86	*/
#define SETPHASE  65    /* $41 101 Set hardware phase-shift		*/
#define HWLOOP	  67	/* $43 103 Announces start of hardware loop	*/
#define PHASESTEP 68
/*---------------------- automation acodes -----------------------------*/
#define SPINA	  70	/* $46 106 rate in Hz,Modifier 2 integers   	*/
#define GAIN	  71	/* $47 107 reciever gain		    	*/
#define LOCKA	  72	/* $48 110 Autolock position & power	    	*/
#define DECUP     73	/* $49 111 Decoupler, Homo Hetro	    	*/
#define CHKSPIN   74	/* $4A 112 Check Spinner for regulation     	*/
#define SHIMA 	  75	/* $4B 113 Autoshimming 		    	*/
#define AUTOGAIN  76	/* $4c 114 Auto reciever gain adjustment   	*/
#define GETSAMP	  77	/* $4D 115 Sample Changer Retrieve Command 	*/
#define LOADSAMP  78	/* $4E 116 Sample Changer Load Command     	*/
#define LOADSHIM  79	/* $4F 117 Set Shim DACs to structure values	*/
/*----------------------------------------------------------------------*/
/*----------------------- IVS  Acodes ----------------------------------*/
#define gradient  80
#define RCVR_CNTL 81	/* store rcvr cntl value                        */
#define OBSLOCK   83	/* to observe Lock from GO, for Bob Hueneman */
#define	EVENTN	  82	/* 52 122 Send multiple timerwords to FIFO	*/
#define	GTABINDX  86	/* $56 0126 Index into Global segment for acodes */
/*----------------------------------------------------------------------*/
#define	SETICM	  90	/* $5A 0132 set Input card to proper phase	*/
#define	wtfrlk	  92	/* $5C 0134 wait for lock reciever gate		*/
#define	lkdisp	  93	/* $5D 0135 set up for lock display		*/
#define	BRANCHB	  94	/* $5E 0136 byte branch routine			*/
			/*	    Offset in bytes follows this acode	*/
#define	PADLY	  95	/* $5F 0137 pre-acq-delay, delay is only 	*/
			/*	    executed if acodes->ct=0.		*/
			/*          Followed by number of acodes which	*/
			/*	    determine delay, then by the EVENT1 */
			/*	    or EVENT2.				*/
#define	SETUP	  96	/* $60 0140 setup hardware			*/
#define HKEEP	  97	/* $61 0141 housekeeping			*/
#define NSC	  98	/* $62 0142 start of next scan, if we can	*/
#define ACQXX	  99	/* $63 0143 take data				*/
#define switchend 100	/* $64 0144 special case for debug		*/
#define LK_SYNC   101	/* $65 0145 sync program lk_freq to lk rcvr	*/
#define	TABLE	  105	/* a poor man's inline table */
#define	TASSIGN	  106	/* get a rt indexed value from a table into an rt var */
#define	SYNCST    120	/* $78 0170 sunc start of fifo with lk/extern	*/

#define	XSAPBIO   112	/* apbio via the xpansion segment  */

#define SAVELKPH  120	/* newacq, store value of lockphase in struct */
#define WGGLOAD	  130	/* load patterns in Waveform Generator(s) */
#define WGCMD	  131	/* waveformer cases */
#define WG3	  132
#define	HSLINES   150	/* high speed lines settings */
#define	NNOISE	  153	/* do noise check*/
#define	NACQXX	  154	/* $63 0143 take data */
#define	NEXACQT   155	/* $63 0143 take data */
#define	SMPL_HOLD 158	/* $9e change lk sample/hold state */
#define SET_GR_RELAY 159/* $9f set auto gradient shimming relay */

#define ENDIF	  161	/* $a1 0241 For real-time IF-THEN */
#define ENDLOOP	  162	/* $a2 0242 Real-time looping */
#define TUNE_START 163	/* $a3 0243 Put acq console in tune mode */

#define	IMASKON   188	/* newacq - HSL fuction */
#define	IMASKOFF  189	/* newacq - HSL fuction */

#define EHWLOOP   201	/* Acode placeholder for newacq */
#define	ISAFEHSL  203	/* Acode placeholder for newacq */
#define	INITHSL   204	/* Acode placeholder for newacq */

#define	FIDCODE   206	/* Acode placeholder for newacq */
#define IFNZBFUNC 207	/* Acode for ifzero, elsenz construct */
#define IFMOD2ZERO 208	/* Acode for ifmod2zero, elsenz construct */

#define XGATE	  1100	/* External gate synchronization */

#define LASTACODE	1101

/* end of op code table */

/* start of status codes */
#define	CTNTCODE	0000	/* $00  0 ct=nt */
#define	MAXCTCODE	0010	/* $08  8 max data acquired */
#define	SACODE		0001	/* $01  1 stop acquistion */
#define	INLCODE		0011	/* $09  9 interlock failure */
#define	VTFCODE		0021	/* $11 17 vtr failure */
#define	SPNFAIL		0031	/* $19 25 spinner failure failure */
#define SMPFAIL		0041	/* $21 33 sample changer failure */
/*#define ADCOVRFLOW	0051 */	/* $29 41 adc over flow error	*/
#define SHMFAIL		0061	/* $31 49 shimming failure 	*/
#define LKFAIL		0071	/* $39 57 autolocking failure */
#define RECOVFL		0101	/* $41 65 reciever overflow error  */
#define GAINFAIL	0111	/* $49 73 autogain failure gain at min.*/
#define	CTCODE		0002	/* $02  2 ct sent to host */
#define AUTOLOCK	0012 	/* $0A 10 auto locking */
#define AUTOSHIM	0022	/* $12 18 autoshimming */
#define AUTOPWR		0032	/* $1A 26 autopower	*/
#define AUTOPHS		0042	/* $22 34 autophasing  */
#define AUTOSAMP	0052	/* $2A 42 sample changing */
#define SETSPIN		0062	/* $32 50 autospin change */
#define CHECKSPIN	0072	/* $3A 58 check spinner change */
#define	IDLECODE	0102	/* $42 66 Apint idle */
#define	RUNCODE		0112 	/* $4A 74 Acquisition running */
#define NOISECHK	0122	/* $52 82 Noise check */
#define HKEEPING	0132	/* $5A 114 IN House Keeping  */
#define LOCKCODE	0142	/* $62 122 LOCK DISPLAY */
#define	LONCODE		0003	/* $03  3 low noise signal */
#define	HINCODE		0013	/* $0B 11 high noise signal */
#define ADCOVRFLOW	0023	/* $17 27 adc over flow error	*/
#define LTC		0043	/* $23 35 large temperature change */
#define	BSCODE		0004	/* $04  4 block size complete */
#define	BUSSERR		0005	/* $05  5 Buss Trap Error */
#define	ADRSERR		0015	/* $0D 13 Address Trap Error */
#define	ABORTCODE	0025	/* $15 21 abort acq */
/* 			0035 */	/* $1D 29 file error acqpgm */
#define	NGIDCODE	0045	/* $25 37 wrong psg for interp */
#define	BADREAD		0055	/* $2D 45 read of acode had error */
#define	STMCODE		0065	/* $35 53 stm count not zero */
#define	FOOCODE		0075	/* $3D 61 foo error */
#define	NPOFLO		0105	/* $45 69 np larger than memory */
#define SPURIOUS        0115	/* $4D 77 spurious interrupt */
#define	SETUPCMPT	0007	/* $07 07 SETUP complete */
#define SHIMSETUP	0017	/* $0F 15 SHIM SETUP Complete */
#define LOCKSETUP	0027	/* $17 23 auto lock SETUP Complete*/
#define SPINSETUP	0037	/* $1F 31 SPIN SETUP Complete */
#define CHANGESETUP	0047	/* $27 39 CHANGE Sample setup complete	*/
#define SAMPLESETUP	0057	/* $2F 47 SAMPLE OPTIAZATION Complete  */

/* end of status codes */

/* end of acodes.h */

