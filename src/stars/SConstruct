from __future__ import print_function
import os
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import myShutil

platform = sys.platform     # sys.platform -> 'linux2' linux, 'interix6' win7 SUA

# define target file names
starsTarget = 'starsprg'
qparTarget  = 'qpar'

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

# source files

if ('darwin' in platform):    # Interix
    nrObj = ['macos/allocations.o',
         'macos/amoeba.o',
         'macos/fftc.o',
         'macos/getrho.o']
else:
    nrObj = ['linux/allocations.o',
         'linux/amoeba.o',
         'linux/fftc.o',
         'linux/getrho.o']

starsFileList = [
                 'base.c',
                 'fid_1.c',
                 'fid_2.c',
                 'freqtofid.c',
                 'iterate.c',
                 'outputfid.c',
                 'printresults.c',
                 'readinput.c',
                 'reduce.c',
                 'shortpulse.c',
                 'starsprog.c',
                 'tent.c']

qparFileList = ['qpar.c']

starsEnv = Environment(CCFLAGS   = '-O2 -DLINUX -Wall',
                       LINKFLAGS = '',
                       CPPPATH   = [cwd])

if ('darwin' in platform):
    starsEnv.Replace(CC = 'clang')
    starsEnv.Replace(CCFLAGS = '-Os -Wall -DLINUX -Wno-implicit-function-declaration ')
    osxflags = os.getenv('osxflags')
    if osxflags:
       starsEnv.Append(CCFLAGS = os.getenv('osxflags'))
    starsEnv.Replace(LINKFLAGS = '-Os')

# actual builds
stars = starsEnv.Program(target  = starsTarget,
                         source  = [starsFileList,nrObj],
                         LIBPATH = [cwd],
                         LIBS    = ['m'])
 
qpar = starsEnv.Program(target  = qparTarget,
                        source  = [qparFileList],
                        LIBPATH = [cwd],
                        LIBS    = ['m'])
 
# define with absolute path where built files will be copied
optionsStarsBinPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir,
                        'options', 'standard','STARS', 'bin')

# make sure the path(s) exist
if not os.path.exists(optionsStarsBinPath):
   os.makedirs(optionsStarsBinPath)

# actions to be performed after targets are built
starsEnv.AddPostAction(stars,
            Action(Copy(optionsStarsBinPath, os.path.join(cwd, starsTarget))))
starsEnv.AddPostAction(qpar,
            Action(Copy(optionsStarsBinPath, os.path.join(cwd, qparTarget))))

starsPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir,
                        'options', 'standard','STARS')
myShutil.copytree('maclib',starsPath,symlinks = False)
myShutil.copytree('templates',starsPath,symlinks = False)
