#!

import os
import sys

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

# get options settings, use parameter to determine NDDS 3x, 4x, 4.2d varients
execfile(os.path.join(cwd, os.pardir, os.pardir, 'scripts', 'buildoptions.py'))
import buildMethods
ovjtools = bo.OVJ_TOOLS

#import variables  and environment from SConstruct
Import("*")

# define target file names
nvRecvProcTarget = 'Recvproc'

javaPath = os.path.join(ovjtools, 'java', 'bin')

print 'nvRecvproc NDDS_VERSION ' + boEnv['NDDS_VERSION']

# NDDS include/lib paths
# if 'Recvproc4x' in COMMAND_LINE_TARGETS:
#  generate NDDS home path from NDDS_VERSION
nddsdir = 'ndds.' + boEnv['NDDS_VERSION']
print 'Compiling NDDS ' + boEnv['NDDS_VERSION'] + ' Version, insure that a clean was done prior to this'
nvRecvProcTarget = 'Recvproc4x'
nddsHome = os.path.join(ovjtools, 'NDDS', nddsdir)
nddsGen = os.path.join(nddsHome, 'scripts', 'nddsgen')
nddsJreBin = os.path.join(nddsHome, 'jre', 'i86Linux','bin')

#  ndds header paths
nddsHdrPathUnix = os.path.join(nddsHome, 'include')
nddsHdrPathShare = os.path.join(nddsHome, 'include', 'ndds')

#  NDDSGEN options
nddsOpts = ' -language C -notypecode -replace '

# libraries and paths
#  nddsLibPath = os.path.join(nddsHome, 'lib', 'i86Linux2.6gcc3.4.3')
nddsLibVer = boEnv['NDDS_LIB_VERSION']
nddsLibPath = os.path.join(nddsHome, 'lib', nddsLibVer )
LibList = [ 'm', 'pthread', 'nddscz', 'nddscorez', 'dl' ]

# source files and header paths
#                      'Data_Upload.c',
nvRecvProcFileList = ['rngBlkLib.c' ,
                      'NDDS_DataFuncs.c',
                      'memorybarrier.c',
                      'recvthrdfuncs.c',
                      'workQObj.c',
                      'recvfuncs.c',
                      'recvHBListener.c',
                      'flowCntrlObj.c',
                      'fileObj.c',
                      'recvproc.c']

# if 'Recvproc4x' not in COMMAND_LINE_TARGETS:
if boEnv['NDDS_VERSION'] == '3x':
   nvRecvProcFileList.append("Data_UploadCustom3x.c")

#
# these headers and source files are symlink'd from their GIT location to the local directory for compilation
#
recvProcPath     = os.path.join(cwd, os.pardir, 'recvproc')
recvProcHdrList = ['dspfuncs.h' ]
recvProcFileList = ['dspfuncs.c' ,
                    'recvcmds.c']

nvSendProcPath     = os.path.join(cwd, os.pardir, 'nvsendproc')
nvSendProcHdrList = ['barrier.h']
nvSendProcFileList = ['barrier.c']

vnmrHdrPath = os.path.join(cwd, os.pardir,'vnmr');
vnmvHdrList = [ 'data.h' ]

ncommPath = os.path.join(cwd, os.pardir, 'ncomm')
ncommHdrList = [ 'errLogLib.h',
                 'hhashLib.h',
                 'ipcKeyDbm.h',
                 'ipcMsgQLib.h',
                 'listObj.h',
                 'mfileObj.h',
                 'msgQLib.h',
                 'semLib.h',
                 'shrMLib.h',
                 'sockets.h' ]
ncommFileList = ['errLogLib.c',
                 'hhashLib.c',
                 'ipcKeyDbm.c',
                 'ipcMsgQLib.c',
                 'listObj.c',
                 'mfileObj.c',
                 'semLib.c',
                 'msgQLib.c',
                 'fdmask.c',
                 'shrMLib.c']

expProcPath     = os.path.join(cwd, os.pardir, 'expproc')
expProcHdrList = [ 'expentrystructs.h',
                   'expQfuncs.h',
                   'hostMsgChannels.h',
                   'expDoneCodes.h',
                   'shrstatinfo.h',
                   'shrexpinfo.h',
                   'parser.h' ]
expProcFileList = ['statfuncs.c', 
                   'expQfuncs.c',
                   'parser.c',
                   'daemon.c']

nvExpProcPath     = os.path.join(cwd, os.pardir, 'nvexpproc')
nvExpProcFileList = ['HBthread.c',
                     'exceptHandler.c']

procProcPath     = os.path.join(cwd, os.pardir, 'procproc')
procProcHdrList = [ 'procQfuncs.h' ]
procProcFileList = ['procQfuncs.c']

nvacqPath     = os.path.join(cwd, os.pardir, 'nvacq')
nvacqHdrList = ['crc32.h',
                 'sysUtils.h',
                 'NDDS_Obj.h',
                 'NDDS_PubFuncs.h',
                 'NDDS_SubFuncs.h']
nvacqFileList = ['crc32.c',
                 'sysUtils.c',
                 'NDDS_Obj.c',
                 'NDDS_PubFuncs.c',
                 'NDDS_SubFuncs.c']

vwacqPath = os.path.join(cwd, os.pardir, 'vwacq')
vwacqHdrList = [ 'hostAcqStructs.h' ]


nddsFileList = [ 'Data_Upload',
                ]
#                 'App_HB']

nddsIdlFileList = [ 'Data_Upload.idl',
                ]
#                 'App_HB.idl']

nddsCFileList = ['Data_Upload.c',
                    'Data_UploadPlugin.c',
                    'Data_UploadSupport.c',
                ]
#                    'App_HB.c',
#                    'App_HBPlugin.c',
#                    'App_HBSupport.c']


# Environment for building nvRecvproc
nvRecvProcEnv = Environment(CCFLAGS    = '-m32 -O -g -ggdb',
                            CPPDEFINES = ['HAVE_LARGEFILE_SUPPORT', '_FILE_OFFSET_BITS=64',
                                          '_LARGEFILE_SOURCE', 'LINUX', 'NODUMMY',
                                          'RTI_UNIX', 'NIRVANA', 'THREADED', 'DEBUG'],
                            LINKFLAGS  = '-m32',
                            CPPPATH    = [cwd,
                                          nddsHdrPathUnix,
                                          nddsHdrPathShare])

# link in ndds x & idl files
#buildMethods.symLinkNow(nvRecvProcEnv, cwd, nvacqPath, nddsIdlFileList)
# buildMethods.symLinkNow(nvRecvProcEnv, cwd, nvacqPath, nddsXFileList)

# nvRecvProcEnv = nvRecvProcBaseEnv.Clone()
#if 'Recvproc4x' in COMMAND_LINE_TARGETS:
nvRecvProcEnv.Append(CPPDEFINES = 'RTI_NDDS_4x')

# define Builders
nddsBld = Builder(action = 'export NDDSHOME; NDDSHOME=' + nddsHome + '; ' + \
                           nddsGen + ' ' + \
                           '-replace ' + '$SOURCES.file',
                  chdir  = cwd)

nvRecvProcEnv.Append(BUILDERS = {'NddsGen' : nddsBld})

# Actual build
#for i in range(len(nddsXFileList)):
#   nvRecvProcEnv.NddsGen(source = [nddsXFileList[i]],
#                         target = nddsCFileList[i])

buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, vwacqPath, vwacqHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, vnmrHdrPath, vnmvHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, recvProcPath, recvProcHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, recvProcPath, recvProcFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvSendProcPath, nvSendProcHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvSendProcPath, nvSendProcFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, procProcPath, procProcHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, procProcPath, procProcFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, ncommPath, ncommHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, ncommPath, ncommFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, expProcPath, expProcHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, expProcPath, expProcFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvExpProcPath, nvExpProcFileList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvacqPath, nvacqHdrList)
buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvacqPath, nvacqFileList)
# buildMethods.makeSymLinks(nvRecvProcEnv, nvRecvProcTarget, cwd, nvacqPath, nddsFileList)

recvproc = nvRecvProcEnv.Program(target  = nvRecvProcTarget,
                                 source  = [nvRecvProcFileList,
                                            recvProcFileList,
                                            nvSendProcFileList,
                                            expProcFileList,
                                            procProcFileList,
                                            ncommFileList,
                                            nvExpProcFileList,
                                            nddsCFileList,
                                            nvacqFileList],
                                 LIBPATH = [cwd,
                                            nddsLibPath],
                                 LIBS    =  [ LibList])

# define with absolute path where built files will be copied
vnmrPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'console', 'ddr', 'acqbin')

# make sure the path(s) exist
if not os.path.exists(vnmrPath):
   os.makedirs(vnmrPath)

# actions to be performed after targets are built
nvRecvProcEnv.AddPostAction(recvproc,
                            Action(Copy(os.path.join(vnmrPath,'Recvproc'), os.path.join(cwd, nvRecvProcTarget))))

