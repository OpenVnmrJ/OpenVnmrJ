"macro gs_fdfhdr"
"***************************************************************"
" gs_fdfhdr                                                        "	
"                                                               "
" Make an FDF header file for this experiment                   "
" A name argument is required, which is used as the name of the "
" directory in which the fdf header file will be saved.         "
" Usage:  fdfhdr('directory_name')  

" Limitations: loc and origin may not take into account the sign"
"              
"***************************************************************"

"** Initialize constants and defaults *********************"
$prog = 'fdfhdr: '			"Program ID"
$headername = 'header'                  "generic header name"
$arraysize = 1
$deg_to_rad = 3.14159265358979323846/180.0		"degree to radian conversion"


"** Check arguments ***************************************"
if ($# < 0.5) or ($# > 1.5) then
  write('error','Usage: fdfhdr(\'directory_name\')')
  abort
endif


"** Check existence of target file and directory **********"
$directory = $1
$filename = $directory+'/'+$headername
exists($filename,'file'):$exists
if ($exists > 0.5) then
  delete($filename)
else
  exists($directory,'file'):$exists
  if ($exists < 0.5) then
    mkdir($directory)
  endif
endif


"** Check array parameter *********************************"
if (array <> '') then
  exists(array,'parameter'):$exists
  if ($exists = 0) then
    write('error',$prog+'Can\'t find parameter \'%s\'',array)
    write('line3','Warning: multiple arrayed parameters not supported')
    return(0)
  else
    $arraysize = size(array)
    $value_string = ''
    $count = 1
    $valstr = ''
    $char = ''
    "** Assemble string to represent list of array values *****"
    repeat
      if (typeof(array)) then
        $value_string = $value_string + {array}[$count]
      else
	format({array}[$count],0,8):$valstr
	length($valstr):$length
	$i = 0
	repeat
	  substr($valstr,$length-$i,1):$char
	  $i = $i + 1
	until ($char <> '0'  or  $i = 8)
	format({array}[$count],0,9-$i):$valstr
        $value_string = $value_string + $valstr
      endif
      if ($count < $arraysize) then  $value_string = $value_string+','  endif
      $count = $count + 1
    until ($count > $arraysize)
  endif
endif


"** Convert Euler angle orientation to nine direction *****"
" cosines which define the imaging plane orientation       "
" relative to the magnet frame.                            "
"**********************************************************"
cos($deg_to_rad*psi):$cospsi
sin($deg_to_rad*psi):$sinpsi
cos($deg_to_rad*phi):$cosphi
sin($deg_to_rad*phi):$sinphi
cos($deg_to_rad*theta):$costheta
sin($deg_to_rad*theta):$sintheta

"** The direction cosine matrix dc is reordered to follow *"
" the axis definitions in the Vnmr phasefile: traces or   *"
" F1 axis first. (1<->2, 4<->5, 7<->8)                    *"
"**********************************************************"
$dc[1] = -$sinphi*$sinpsi - $cosphi*$costheta*$cospsi
$dc[2] = $sinphi*$cospsi - $cosphi*$costheta*$sinpsi
$dc[3] = $sintheta*$cosphi

$dc[4] = $cosphi*$sinpsi - $sinphi*$costheta*$cospsi
$dc[5] = -$cosphi*$cospsi - $sinphi*$costheta*$sinpsi
$dc[6] = $sintheta*$sinphi

$dc[7] = $cospsi*$sintheta
$dc[8] = $sinpsi*$sintheta
$dc[9] = $costheta


"** Define header entries and formats *********************"
$format[1] =  'float  rank = %d;'
$format[2] =  'char  *spatial_rank = "%s";'
$format[3] =  'char  *storage = "%s";'
$format[4] =  'float  bits = %d;'
$format[5] =  'char  *type = "%s";'
$format[6] =  'float  matrix[] = {%d, %d, %d};'
$format[7] =  'char  *abscissa[] = {"%s","%s","%s"};'
$format[8] =  'char  *ordinate[] = {"%s"};'
$format[9] =  'float  span[] = {%f, %f, %f};'
$format[10] = 'float  origin[] = {%f, %f, %f};'
$format[11] = 'char  *nucleus[] = {"%s","%s"};'
$format[12] = 'float  nucfreq[] = {%f, %f};'
$format[13] = 'float  location[] = {%f, %f, %f};'
$format[14] = 'float  roi[] = {%f, %f, %f};'
$format[15] = 'float  orientation[] = {%.4f,%.4f,%.4f, %.4f,%.4f,%.4f, %.4f,%.4f,%.4f};'
$format[16] = 'char  *array_name = "%s";'
$format[17] = 'float  array_vals[] = {%s};'
$format[18] = 'float  %s = %f;'
$format[19] = 'char  *%s = "%s";'
$format[20] = 'int    array_index = %d;'
$format[21] = 'char  *file = "%s";'
$format[22] = 'int  bigendian = %d;'

"***** Set $fn, $fn1, $fn2 *****"
" use fn pars to enforce power of 2 values"
$isactive=0
on('fn'):$isactive
if ($isactive > 0.5) then
  $fn = fn
else
  $savfn=fn
  fn = np
  $fn = fn
  fn= $savfn
  off('fn')
endif

on('fn1'):$isactive
if ($isactive > 0.5) then
  $fn1 = fn1
else
  $savfn=fn1
  exists('nv','parameter','processed'):$exists
  if ($exists) then fn1 = nv*2
  else
    if (nf > 1) then fn1 = nf*2
    else fn1 = ni*2
    endif
  endif
  $fn1=fn1
  fn1=$savfn
  off('fn1')
endif

on('fn2'):$isactive
if ($isactive > 0.5) then
  $fn2 = fn2
else 
  $savfn=fn2
  exists('nv2','parameter'):$exists
  if ($exists) then fn2 = nv2*2 
  else
    if (nf > 1) then fn2 = ni*2
    else fn2 = ni2*2
    endif
  endif
  $fn2 = fn2
  fn2 = $savfn
  off('fn2')
endif

"** Check 'trace' parameter, match lro, lpe, fn, fn1 ******"
if (trace = 'f1') then
  $lro = lro  $lpe = lpe
else
  $lro = lpe  $lpe = lro  $tmp = $fn $fn = $fn1  $fn1 = $tmp
endif


"** Assemble common information for all headers ***********"
$rank = nD
if ($rank <> 3) then
  write('error', $prog+'Only 3D data sets are supported')
  return(0)
endif
$spatial_rank = '3dfov'
$type = 'absval'
$abs[1] = 'cm'
$abs[2] = 'cm'
$abs[3] = 'cm'
$ord = 'intensity'
$loc[1] = pro
$loc[2] = ppe
$loc[3] = ppe2
$roi[1] = lro
$roi[2] = lpe
$roi[3] = lpe2

"** This stuff is fixed for now ***************************"
$storage = 'float'
$bits = 32


"** Create and write the temporary fdf header file ********"
write('reset',$filename)
write('file',$filename,'%s','#!/usr/local/fdf/startup')
write('file',$filename,$format[1],$rank)
write('file',$filename,$format[2],$spatial_rank)
write('file',$filename,$format[3],$storage)
write('file',$filename,$format[4],$bits)
write('file',$filename,$format[5],$type)
write('file',$filename,$format[6],0.5*$fn, 0.5*$fn1, 0.5*$fn2)
write('file',$filename,$format[7],$abs[1],$abs[2],$abs[3])
write('file',$filename,$format[8],$ord)
write('file',$filename,$format[9],lro, lpe, lpe2)
write('file',$filename,$format[10], pro-(lro/2), ppe-(lpe/2), ppe2-(lpe2/2))
write('file',$filename,$format[11],tn,dn)
write('file',$filename,$format[12],sfrq,dfrq)
write('file',$filename,$format[13],$loc[1],$loc[2],$loc[3])	
write('file',$filename,$format[14],$roi[1],$roi[2],$roi[3])	
write('file',$filename,$format[15],$dc[1],$dc[2],$dc[3],$dc[4],\
    $dc[5],$dc[6],$dc[7],$dc[8],$dc[9])

if ($arraysize > 1) then
  write('file',$filename,$format[16], array)
  if (typeof(array)) then
    write('file', $filename,$format[17],$value_string)
    write('file', $filename,$format[19],array,{array}[$array])
  else
    write('file',$filename,$format[17],$value_string)		
    write('file',$filename,$format[18],array,{array}[$array])
  endif 
  write('file',$filename,$format[20],$array)		
else
  write('file',$filename,$format[16], 'none')  
endif
write('file',$filename,$format[21],file)

"set bigendian parameter
$sys = ''
shell('uname'):$sys

if($sys = 'Linux') then
  $bigendian = 0
  write('file',$filename,$format[22],$bigendian)
endif

return($rank)

"*************************************************************

"		Modification History

" 20060824 - If vnmrs bigendian flag set
"            This seems to be needed for shimmaps only
"	           B0 maps are displayed correctly without this!
" 20060918 - ppe2 included in origin and loc
" 20061025 - bigendian parameter defined for Linux

"*************************************************************
