#!

from __future__ import print_function
import os
import datetime

ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
    print("OVJ_TOOLS env not found.")
    print("For bash and variants, use export OVJ_TOOLS=<path>")
    print("For csh and variants,  use setenv OVJ_TOOLS <path>")
    sys.exit(1)

# target
cryoTarget = 'cryo.jar'

# current working directory
cwd = os.getcwd()

# paths
classPath = cwd

jarFileList = [os.path.join(cwd, 'cryoaccess.jar')]

javaPath = os.path.join(ovjtools, 'java', 'bin')

# make sure the path(s) exist
classesPath = os.path.join(cwd, 'classes')
if not os.path.exists(classesPath):
   os.makedirs(classesPath)

jarBin = os.path.join(javaPath, 'jar')

# actions to perform at interpretation time
# copy the cryoaccess classes into the classes directory
for i in jarFileList:
   Execute('cd classes; ' + jarBin + ' -xf ' + i)

# define build environment
jEnv = Environment(ENV = {'JAVA_HOME' : javaPath,
                          'CLASSPATH' : classesPath,
                          'PATH' : javaPath + ':' + os.environ['PATH']})

# actual builds
srcPath = os.path.join(cwd, 'src')
jEnv.Java(JAVACFLAGS = '-J-mx128m',
          target     = classesPath,
          source     = srcPath)

todaysDate = datetime.datetime.now().strftime("%B %e, %Y %T %Z")
manifestFile = os.path.join(cwd, 'Manifest')
f = open(manifestFile, 'w')
f.write('Manifest-Version: 1.0 ')
f.write(todaysDate)
f.write('\n')
f.write('Main-Class: ClientGui\n')
f.close()

jarBuildObject = jEnv.Jar(JAR      = jarBin,
                          target   = cryoTarget,
                          source   = [classesPath,
                                      manifestFile],
                          JARCHDIR = classesPath)

# define with absolute path where built files will be copied
installPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'java')

# make sure the path(s) exist
if not os.path.exists(installPath):
   os.makedirs(installPath)

# actions to be performed after targets are built
jEnv.AddPostAction(jarBuildObject,
                   Action(Copy(installPath, os.path.join(cwd, cryoTarget))))

