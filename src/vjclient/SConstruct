#!

import os
import shutil
import datetime
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import buildMethods

# target
vjclientTarget = 'vjclient.jar'
vjclientDashOTarget = 'vjclient.jar.dasho'
vjclientProGuardTarget = 'vjclient.jar.pro'

# current working directory
cwd = os.getcwd()

# get options environment
boFile = os.path.join(cwd, os.pardir, os.pardir, 'buildoptions.py')
if not os.path.exists(boFile):
   boFile = os.path.join(cwd, os.pardir, os.pardir, 'scripts', 'buildoptions.py')
execfile(boFile)

# paths
javaPath = os.path.join(cwd, os.pardir, os.pardir, '3rdParty', 'java', 'bin')

jUnitPath = os.path.join(cwd, os.pardir, os.pardir,
					  '3rdParty', 'junit', 'junit.jar')

# make sure the path(s) exist
classesPath = os.path.join(cwd, 'classes')
if not os.path.exists(classesPath):
   os.makedirs(classesPath)

jarBin = os.path.join(javaPath, 'jar')

# define build environment
jEnv = Environment(ENV = {'JAVA_HOME' : javaPath,
                          'CLASSPATH' : classesPath + ':' + jUnitPath,
                          'PATH' : javaPath + ':' + os.environ['PATH']})

# create source hardlinks at scons interpretation time
# in java SDK 1.3+ javac doesn't follow symlinks

# actual builds
srcPath = os.path.join(cwd, 'src')
javaBuildObj = jEnv.Java(JAVACFLAGS = '-J-mx128m',
                         target     = classesPath,
                         source     = srcPath)

todaysDate = datetime.datetime.now().strftime("%B %e, %Y %T %Z")
shortDate = datetime.datetime.now().strftime("%Y-%m-%d %T")
manifestFile = os.path.join(cwd,'Manifest')
f = open(manifestFile,'w')
f.write('Manifest-Version: 1.0 ')
f.write(todaysDate)
f.write('\n')
f.write('Main-Class: vnmr.vjclient.Vjclient\n')
f.write('Implementation-Version: ')
f.write(shortDate)
f.write('\n')
f.close()

jarBuildObject = jEnv.Jar(JAR      = jarBin,
                          target   = vjclientTarget,
                          source   = [classesPath, manifestFile],
                          JARCHDIR = classesPath)

# define with absolute path where built files will be copied
installPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'java')

# make sure the path(s) exist
if not os.path.exists(installPath):
   os.makedirs(installPath)



# actions to be performed after targets are built
if boEnv['dasho']=='y' or boEnv['vjclient_0']=='y':
   jEnv.AddPostAction(jarBuildObject,
                   Action(os.path.join(cwd,'vjclientProGuard.sh')))

if boEnv['vjclient_0']=='y':
   jEnv.AddPostAction(jarBuildObject,
                   Action(Copy(os.path.join(installPath,vjclientTarget),
                               os.path.join(cwd, vjclientProGuardTarget))))
else:
   jEnv.AddPostAction(jarBuildObject,
                   Action(Copy(installPath, os.path.join(cwd, vjclientTarget))))


