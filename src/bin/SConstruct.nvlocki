#!

import os
import sys

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

# import build options 'bo'
## NDDS include/lib paths
# get options settings, use parameter to determine NDDS 3x, 4x, 4.2d varients
execfile(os.path.join(cwd, os.pardir, os.pardir, 'scripts', 'buildoptions.py'))
ovjtools = bo.OVJ_TOOLS
import buildMethods

#import variables  and environment from SConstruct
Import("*")

# targets
nvLockiTarget = 'nvlocki'

print 'nvlocki NDDS_VERSION ' + boEnv['NDDS_VERSION']

#NDDS include/lib paths
# if 'nvlocki4x' in COMMAND_LINE_TARGETS:
nddsdir = 'ndds.' + boEnv['NDDS_VERSION']
print 'Compiling NDDS ' + boEnv['NDDS_VERSION'] + ' Version, insure that a clean was done prior to this'
nvLockiTarget = 'nvlocki4x'
nddsHome = os.path.join(ovjtools,'NDDS', nddsdir)
nddsGen = os.path.join(nddsHome, 'scripts', 'nddsgen')
nddsJreBin = os.path.join(nddsHome, 'jre', 'i86Linux', 'bin')

#  ndds header paths
nddsHdrPathUnix = os.path.join(nddsHome, 'include')
nddsHdrPathShare = os.path.join(nddsHome, 'include', 'ndds')
   
#  NDDSGEN options
nddsOpts = ' -language C -notypecode -replace '
   
# libraries and paths
# nddsLibPath = os.path.join(nddsHome, 'lib', 'i86Linux2.6gcc3.4.3')
nddsLibVer = boEnv['NDDS_LIB_VERSION']
nddsLibPath = os.path.join(nddsHome, 'lib', nddsLibVer )
LibList = [ 'nsl', 'm', 'pthread', 
               'nddscz', 'nddscorez', 'dl' ]

# library dependancies
ncommPath = os.path.join(cwd, os.pardir, 'ncomm')
SConscript(os.path.join(ncommPath, 'SConstruct'))

# source files
ncommHdrList = ['errLogLib.h',
                'mfileObj.h',
                'sockets.h']

vnmrPath    = os.path.join(cwd, os.pardir, 'vnmr')
vnmrHdrList = ['data.h',
               'graphics.h',
               'group.h',
               'vnmrsys.h']

nvLockIFileList = ['nvlocki.c']

nvLockInvAcqCPath     = os.path.join(cwd, os.pardir, 'nvacq')
#nvLockInvAcqCFileList = ['Lock_Cmd.c',
#                         'Lock_FID.c',
nvLockInvAcqCFileList = ['NDDS_SubFuncs.c',
                         'NDDS_Obj.c',
                         'sysUtils.c']
 

nvacqPath    = os.path.join(cwd, os.pardir, 'nvacq')
nvacqHdrList = ['NDDS_Obj.h']

xracqPath    = os.path.join(cwd, os.pardir, 'xracq')
xracqHdrList = ['ACQ_SUN.h']

expProcPath    = os.path.join(cwd, os.pardir, 'expproc')
expProcHdrList = ['expQfuncs.h',
                  'shrexpinfo.h',
                  'shrstatinfo.h']

vwacqPath    = os.path.join(cwd, os.pardir, 'vwacq')
vwacqHdrList = ['acqcmds.h',
                'hostAcqStructs.h']

nddsPath = os.path.join(cwd, os.pardir, 'nvacq')

# NDDS Build Files
nddsFileList = [ 'Lock_FID' ]
nddsIdlFileList = [ 'Lock_FID.idl' ]
# the order of the elements within the next two
# lists must be the match
## if 'nvlocki4x' in COMMAND_LINE_TARGETS:

nddsCFileList = [ 'Lock_FID.c',
                     'Lock_FIDPlugin.c',
                     'Lock_FIDSupport.c']

# create some ndds files
# nddsgen of 3x files can not be threaded so for 3x we do the nddsgen during parse time

# build environments
nvLockiCEnv = Environment(CCFLAGS    = '-O2 -m32 -g ',
                          CPPDEFINES = ['SUN', 'X11', 'MOTIF', 'NESSIE', 'RTI_UNIX',
                                        'LINUX', 'VNMRJ', 'BSDACQ'],
                          LINKFLAGS  = '-g -m32 ',
                          CPPPATH    = [cwd,
                                        nddsHdrPathUnix,
                                        nddsHdrPathShare])


# for 4x add the define -DRTI_NDDS_4x 
## if 'nvlocki4x' in COMMAND_LINE_TARGETS:
nvLockiCEnv.Append(CPPDEFINES = 'RTI_NDDS_4x')

nvLockiCppEnv = nvLockiCEnv.Clone(CC         = 'g++',
                                  CCFLAGS    = '-O -g -Wno-deprecated -m32',
                                  CPPDEFINES = ['LINUX'],
                                  LINKFLAGS  = '-O -m32 -g -Wl,-rpath,/vnmr/lib ')

# define Builders
# nddsBld = Builder(action = 'export NDDSHOME; NDDSHOME=' + nddsHome + '; ' + \
#                            nddsGen + ' ' + \
#                            '-replace ' + '$SOURCES.file',
#                   chdir  = cwd)
# 
# nvLockiCEnv.Append(BUILDERS = {'NddsGen' : nddsBld})

#

nvLockiCSharedObj = nvLockiCEnv.SharedObject(nvLockIFileList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockiCSharedObj, cwd, vnmrPath, vnmrHdrList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockiCSharedObj, cwd, xracqPath, xracqHdrList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockiCSharedObj, cwd, expProcPath, expProcHdrList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockiCSharedObj, cwd, vwacqPath, vwacqHdrList)

nvLockInvAcqCSharedObj = nvLockiCEnv.SharedObject(nvLockInvAcqCFileList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockInvAcqCSharedObj, cwd, nvLockInvAcqCPath, nvLockInvAcqCFileList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockInvAcqCSharedObj, cwd, nvacqPath, nvacqHdrList)
buildMethods.makeSymLinks(nvLockiCEnv, nvLockInvAcqCSharedObj, cwd, ncommPath, ncommHdrList)

nvLockInvNddsCSharedObj = nvLockiCEnv.SharedObject(nddsCFileList)

nvlocki = nvLockiCppEnv.Program(target  = nvLockiTarget,
                                source  = [nvLockiCSharedObj,
                                           nvLockInvNddsCSharedObj,
                                           nvLockInvAcqCSharedObj],
                                LIBPATH = [cwd,
                                           nddsLibPath,
                                           ncommPath],
                                LIBS    = ['acqcomm'] + LibList)


# define with absolute path where built files will be copied
ddrPath = os.path.join(bo.prefix, 'console','ddr', 'bin')

# make sure the path(s) exist
if not os.path.exists(ddrPath):
   os.makedirs(ddrPath)

nvLockiCppEnv.AddPostAction(nvlocki,
                            Action(Copy(os.path.join(ddrPath,'nvlocki'), os.path.join(cwd, nvLockiTarget))))

