from __future__ import print_function
import os
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import buildMethods

platform = sys.platform

# targets
Target = 'convertcmx'

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

HdrList = ['allocate.h',
                         'bruker.h',
                         'cmx.h',
                         'convert.h',
                         'fdatadef.h',
                         'm100.h',
                         'protos.h',
                         'smis.h',
                         'stext.h',
                         'vdata.h']
FileList = ['bruker.c',
                          'cmx.c',
                          'convertcmx.c',
                          'm100.c',
                          'nmr1.c',
                          'smis.c',
                          'stext.c',
                          'unity.c']

# build environments
Env = Environment(CCFLAGS    = '-O -Wall',
                      CPPDEFINES = ['LINUX'],
                      CPPPATH    = [cwd])

if ('darwin' in platform):
    Env.Replace(CC = 'clang')
    Env.Replace(CCFLAGS = '-Os -Wall -arch x86_64 -Wno-implicit-function-declaration ')
    osxflags = os.getenv('osxflags')
    if osxflags:
       Env.Append(CCFLAGS = os.getenv('osxflags'))
    Env.Replace(LINKFLAGS = '-Os')



# actual builds
convertcmx = Env.Program(target = Target,
                             source = [FileList],
                             LIBS   = ['m'])

# define with absolute path where built files will be copied
vnmrInstallPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'bin')

# make sure the path(s) exist
if not os.path.exists(vnmrInstallPath):
   os.makedirs(vnmrInstallPath)

Env.AddPostAction(convertcmx,
                      Action(Copy(vnmrInstallPath, os.path.join(cwd, Target))))

