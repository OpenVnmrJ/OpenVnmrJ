import os
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import buildMethods

platform = sys.platform        # sys.platform -> 'linux2' linux, 'interix6' win7 SUA

dpsPsGenTarget = 'dps_ps_gen'

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()

# source files
vnmrPath    = os.path.join(cwd, os.pardir, 'vnmr')
vnmrHdrList = ['dpsdef.h']

dpsPsGenFileList = ['dps_ps_gen.c']

# build environments
dpsPsGenEnv = Environment(CCFLAGS   = '-O -Wall',
                          CPPPATH   = [cwd])

if ( 'darwin' in platform ):
    dpsPsGenEnv.Replace(CC = 'clang')
    dpsPsGenEnv.Replace(CCFLAGS = '-Os -Wall -DMACOS')

if ('interix' in platform):    # Interix
   interixgcc= os.path.join(os.sep,'opt','gcc.3.3','bin','gcc')
   dpsPsGenEnv.Replace( CC=interixgcc )
   dpsPsGenEnv.Replace(  LINKFLAGS='-O -m32' )
   dpsPsGenEnv.AppendUnique(  CPPDEFINES=[ '_ALL_SOURCE','__INTERIX','LINUX','VNMRJ','SUN']  )
   dpsPsGenEnv.Append(  LIBPATH=[ os.path.join(os.sep, 'usr','lib','x86'), os.path.join(os.sep, 'usr','lib') ]  )
   # print "CC is:", dpsPsGenEnv['CC']
   # print "C++ is:", dpsPsGenEnv['CXX']

buildMethods.makeSymLinks(dpsPsGenEnv, dpsPsGenTarget, cwd, vnmrPath, vnmrHdrList)

# actual builds
dpsPsGen = dpsPsGenEnv.Program(target = dpsPsGenTarget,
                               source = dpsPsGenFileList,
                               LIBS   = ['m'])

# define with absolute path where built files will be copied
vnmrInstallPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'bin')

# make sure the path(s) exist
if not os.path.exists(vnmrInstallPath):
   os.makedirs(vnmrInstallPath)

dpsPsGenEnv.AddPostAction(dpsPsGen,
                          Action(Copy(vnmrInstallPath, os.path.join(cwd, dpsPsGenTarget))))

