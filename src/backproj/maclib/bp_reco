"macro bp_reco"
"***************************************************************"
" bp_reco                                                       "	
"                                                               "
" Macro for reconstruction back projection data.		"
" This macro already expects the data to be transformed.  It	"
" reconstructs 2D and 3D bacprojection files and  writes out 	"
" the files in fdf format.					"
"***************************************************************"

"***************************************************************"
" set $nv and $nv2						"
"***************************************************************"
$nv=1
$nv2=1
exists('nv','parameter'):$exists
if ($exists) then
   $nv = nv
else
   $nv = ni
endif

exists('nv2','parameter'):$exists
if ($exists) then
   $nv2 = nv2
else
   exists('ni2','parameter'):$exists
   if ($exists) then
   	$nv2 = ni2
   endif
endif

pwd:$w1
cd(curexp)
rm('recon','-r')
mkdir('recon')

exists('datdir','directory'):$exists
if ($exists < 0.5) then
   mkdir('datdir')
endif

cd($w1)

if ($nv2 >1 and $nv>1) then
	"*******************************************************"
	" 3d Reconstruction					"
	"*******************************************************"
 	clear
	if (fn = np) then 
	$n=np/2
	else
	$n=fn/2
	endif
	$m=($n-1)/2.0
	cd(curexp)
	cd('datdir')
	rm('mchelp')
	rm('B*')
	rm('bp_cmd')
	echo('magnitude calculation is running')
	write('file','mchelp','%s %s %s','bp_mc','data','B')
	shell('chmod +x mchelp')
	shell('mchelp')
	echo('profile generation finished')
	write('file','bp_cmd','prof_file  \tB')
	write('file','bp_cmd','m_size     \t%d',$n)
	write('file','bp_cmd','i_size     \t%d',$n)
	write('file','bp_cmd','n_phi      \t%d',$nv)
	write('file','bp_cmd','n_theta    \t%d',$nv2)
	write('file','bp_cmd','in_memory_prof  0')
	write('file','bp_cmd','filter_name')
	write('file','bp_cmd','filter_bw')
	write('file','bp_cmd','meta_image')
	write('file','bp_cmd','prof_filt1')
	write('file','bp_cmd','prof_filt2')
	write('file','bp_cmd','image_file')
	write('file','bp_cmd','r_size')
	write('file','bp_cmd','m_center_x \t%f',$m)
	write('file','bp_cmd','m_center_y \t%f',$m)
	write('file','bp_cmd','m_center_z \t%f',$m)
	write('file','bp_cmd','r_center_x \t%f',$m)
	write('file','bp_cmd','r_center_y \t%f',$m)
	write('file','bp_cmd','r_center_z \t%f',$m)
	write('file','bp_cmd','theta_start \t0.0')
	write('file','bp_cmd','theta_end \t%f',theta2)
	write('file','bp_cmd','phi_start \t0.0')
	write('file','bp_cmd','phi_end \t%f',phi2)
	write('file','bp_cmd','\n\n\n')
	write('file','bphelp','%s %s','bp_3d','bp_cmd')
	edit('bp_cmd')
	echo('3D BP is running')
	shell('chmod +x bphelp')
	shell('bphelp')

	rm('meta')
	rm('B')
	echo('3D reconstruction finished \nnow copying data')
	"**********************************************************"
	"** Create and write fdf header 	    ***************"
	"**********************************************************"
	"** Define header entries and formats *********************"
	$format[1] =  'float  rank = %d;'
	$format[2] =  'char  *spatial_rank = "%s";'
	$format[3] =  'char  *storage = "%s";'
	$format[4] =  'float  bits = %d;'
	$format[5] =  'char  *type = "%s";'
	$format[6] =  'float  matrix[] = {%d, %d, %d};'
	$format[7] =  'char  *abscissa[] = {"%s", "%s", "%s"};'
	$format[8] =  'char  *ordinate[] = { "%s" };'
	$format[9] =  'float  span[] = {%f, %f, %f};'
	$format[10] = 'float  origin[] = {%f, %f, %f};'
	$format[11] = 'char  *nucleus[] = {"%s","%s"};'
	$format[12] = 'float  nucfreq[] = {%f,%f};'
	$format[13] = 'float  location[] = {%f,%f,%f};'
	$format[14] = 'float  roi[] = {%f,%f,%f};'
	$format[15] = 'float  orientation[] = {%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f};'
	$format[16] = 'int bigendian = %d;'
	

	"** Assemble information for header ***********"
	"*Determine DC values from the gradient signs*************"
	if (gro < 0) then $sgro=-1 else $sgro=1 endif

	"*Decode orient*******************************************"
	$gread=''
	substr(orient,1,1):$gread
	$gphase=''
	substr(orient,2,1):$gphase
	$gslice=''
	substr(orient,3,1):$gslice

	"*Assign the values of the DC matrix**********************"
	$k=1
	repeat
		$dc[$k]=0
	$k=$k+1
	until ($k > 9)

	"*Row 1 Read Out Axis*************************************"
	if ($gread='x') then $dc[1]=$sgro endif
	if ($gread='y') then $dc[2]=$sgro endif
	if ($gread='z') then $dc[3]=$sgro endif

	"*Row 2 Phase Encode Axis*********************************"
	if ($gphase='x') then $dc[4]=$sgro endif
	if ($gphase='y') then $dc[5]=$sgro endif
	if ($gphase='z') then $dc[6]=$sgro endif

	"*Row 3 Slice Select Axis*********************************"
	if ($gslice='x') then $dc[7]=$sgro endif
	if ($gslice='y') then $dc[8]=$sgro endif
	if ($gslice='z') then $dc[9]=$sgro endif

	$fn = 0.5*fn
	$lro = lro

	"** Create and write the temporary fdf header file ********"
	$headerfile = 'B.hdr'
	write('reset',$headerfile)
	write('file',$headerfile,'%s','#!/usr/local/fdf/startup')
	write('file',$headerfile,$format[1],3)
	write('file',$headerfile,$format[2],'3dfov')
	write('file',$headerfile,$format[3],'float')
	write('file',$headerfile,$format[4],32)
	write('file',$headerfile,$format[5],'absval')
	write('file',$headerfile,$format[6],$fn,$fn,$fn)
	write('file',$headerfile,$format[7],'cm','cm','cm')
	write('file',$headerfile,$format[8],'intensity')
	write('file',$headerfile,$format[9],lro,lro,lro)
	write('file',$headerfile,$format[10],0.0,0.0,0.0)
	write('file',$headerfile,$format[11],tn,dn)
	write('file',$headerfile,$format[12],sfrq,dfrq)
	write('file',$headerfile,$format[13],0.0,0.0,0.0)	
	write('file',$headerfile,$format[14],lro,lro,lro)
	write('file',$headerfile,$format[16],0)	

	
	write('file',$headerfile,$format[15],$dc[1],$dc[2],$dc[3],$dc[4],\
          $dc[5],$dc[6],$dc[7],$dc[8],$dc[9])


	$fdffile = ''
	$fdffile = seqfil+'.fdf'
	rm($fdffile)
	shell('fdfgluer '+$headerfile+' B.000 '+$fdffile)
	cp($fdffile,curexp+'/recon')
	rm('mon.out')
	rm('B.000')
	rm('out')
        rm('sorthelp')
	rm('mchelp')
	rm('bphelp')
	rm('bp_cmd')

	clear
	echo('3D BP finished')
	write('line3','3D BP finished')
	write('line3','Displaying data ....')
	echo('Displaying data ....')
	
    aipLoadFile(curexp+'/recon/'+$fdffile)  "This enables the Extract page" 
    aipExtract('xy',0,$fn-1,1) "Display ROxPE images"
else
    "***************************************************"
    " 2d Reconstruction					"
    "***************************************************"
    if ($nv > 1) then
	clear
	if (array = '')
	then $expnum=1
	else $expnum=size(array)
	endif
	if (fn <= np) then 
	$n=np/2
	else
	$n=fn/2 
	endif
	$m=($n-1)/2.0
	cd(curexp)
	cd('datdir')
	rm('mchelp')
        rm('sorthelp')
	rm('B*')
	rm('bp_cmd')
        rm('out')
	write('file','sorthelp','%s %s %s %d %d','bp_sort','data','out',$expnum,$nv)
	shell('chmod +x sorthelp')
	shell('sorthelp')
	echo('magnitude calculation is running')
	write('file','mchelp','%s %s %s','bp_mc','out','B')
	shell('chmod +x mchelp')
	shell('mchelp')
	echo('profile generation finished')
	write('file','bp_cmd','prof_file  \tB')
	write('file','bp_cmd','m_size     \t%d',$n)
	write('file','bp_cmd','i_size     \t%d',$n)
	write('file','bp_cmd','n_phi      \t%d',$nv)
	write('file','bp_cmd','n_theta    \t%d',$expnum)
	write('file','bp_cmd','in_memory_prof  0')
	write('file','bp_cmd','filter_name')
	write('file','bp_cmd','filter_bw')
	write('file','bp_cmd','meta_image')
	write('file','bp_cmd','prof_filt1')
	write('file','bp_cmd','prof_filt2')
	write('file','bp_cmd','image_file')
	write('file','bp_cmd','r_size')
	write('file','bp_cmd','m_center_x \t%f',$m)
	write('file','bp_cmd','m_center_y \t%f',$m)
	write('file','bp_cmd','m_center_z \t%f',$m)
	write('file','bp_cmd','r_center_x \t%f',$m)
	write('file','bp_cmd','r_center_y \t%f',$m)
	write('file','bp_cmd','r_center_z \t%f',$m)
	write('file','bp_cmd','theta_start')
	write('file','bp_cmd','theta_end')
	write('file','bp_cmd','phi_start \t0.0')
	write('file','bp_cmd','phi_end \t%f',phi2)
	write('file','bp_cmd','\n\n\n')
	" do not display bp_cmd file for 2d data "
	"shell('textedit bp_cmd') "
	write('file','bphelp','%s %s','bp_2d','bp_cmd')
	echo('2D BP is running')
	shell('chmod +x bphelp')
	shell('bphelp')
	rm('B')
	rm('meta')
	echo('2D reconstruction finished \nnow copying data')

	"**********************************************************"
	"** Create and write fdf header 	    ***************"
	"**********************************************************"
	"** Convert Euler angle orientation to nine direction *****"
	" cosines which define the imaging plane orientation       "
	" relative to the magnet frame.                            "
	"**********************************************************"
	$deg_to_rad = 3.14159265358979323846/180.0		"degree to radian conversion"

	cos($deg_to_rad*psi):$cospsi
	sin($deg_to_rad*psi):$sinpsi
	cos($deg_to_rad*phi):$cosphi
	sin($deg_to_rad*phi):$sinphi
	cos($deg_to_rad*theta):$costheta
	sin($deg_to_rad*theta):$sintheta

	"** The direction cosine matrix dc is reordered to follow *"
	" the axis definitions in the Vnmr phasefile: traces or   *"
	" F1 axis first. (1<->2, 4<->5, 7<->8)                    *"
	"**********************************************************"
	$dc[1] = -$sinphi*$sinpsi - $cosphi*$costheta*$cospsi
	$dc[2] = $sinphi*$cospsi - $cosphi*$costheta*$sinpsi
	$dc[3] = $sintheta*$cosphi

	$dc[4] = $cosphi*$sinpsi - $sinphi*$costheta*$cospsi
	$dc[5] = -$cosphi*$cospsi - $sinphi*$costheta*$sinpsi
	$dc[6] = $sintheta*$sinphi

	$dc[7] = $cospsi*$sintheta
	$dc[8] = $sinpsi*$sintheta
	$dc[9] = $costheta

	"** Define header entries and formats *********************"
	$format[1] =  'float  rank = %d;'
	$format[2] =  'char  *spatial_rank = "%s";'
	$format[3] =  'char  *storage = "%s";'
	$format[4] =  'float  bits = %d;'
	$format[5] =  'char  *type = "%s";'
	$format[6] =  'float  matrix[] = {%d, %d};'
	$format[7] =  'char  *abscissa[] = {"%s", "%s"};'
	$format[8] =  'char  *ordinate[] = { "%s" };'
	$format[9] =  'float  span[] = {%f, %f};'
	$format[10] = 'float  origin[] = {%f, %f};'
	$format[11] = 'char  *nucleus[] = {"%s","%s"};'
	$format[12] = 'float  nucfreq[] = {%f,%f};'
	$format[13] = 'float  location[] = {%f,%f,%f};'
	$format[14] = 'float  roi[] = {%f,%f,%f};'
	$format[15] = 'float  orientation[] = {%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f};'
	$format[16] = 'int bigendian = %d;'

	"** Assemble common information for all headers ***********"
	$rank = nD
  	$storage = 'float'
  	$bits = 32
	$spatial_rank = '2dfov'
	$type = 'absval'
	$abs[1] = 'cm'
	$abs[2] = 'cm'
	$ord = 'intensity'
	$loc[1] = pro
	$loc[2] = pro
	$roi[1] = lro
	$roi[2] = lro
	$roi[3] = thk/10

	$fn = 0.5*fn
	$slice = 0
	$count = 0
	$index = ''

     "** Loop through slices  ***************************"
     repeat

	if (array = 'pss') then
	   $slice = $slice+1
	   $loc[3] = pss[$slice]
	else
	   $loc[3] = pss[$slice]
	endif


      	"** Create and write the temporary fdf header file ********"
	$headerfile = 'B.hdr'
	write('reset',$headerfile)
      	write('file',$headerfile,'%s','#!/usr/local/fdf/startup')
      	write('file',$headerfile,$format[1],$rank)
      	write('file',$headerfile,$format[2],$spatial_rank)
      	write('file',$headerfile,$format[3],$storage)
      	write('file',$headerfile,$format[4],$bits)
      	write('file',$headerfile,$format[5],$type)
      	write('file',$headerfile,$format[6],$fn,$fn)
      	write('file',$headerfile,$format[7],$abs[1],$abs[2])
      	write('file',$headerfile,$format[8],$ord)
      	write('file',$headerfile,$format[9],lro,lro)
      	write('file',$headerfile,$format[10],pro,pro)
      	write('file',$headerfile,$format[11],tn,dn)
      	write('file',$headerfile,$format[12],sfrq,dfrq)
      	write('file',$headerfile,$format[13],$loc[1],$loc[2],$loc[3])	
      	write('file',$headerfile,$format[14],$roi[1],$roi[2],$roi[3])	
	write('file',$headerfile,$format[16],0)	
      	write('file',$headerfile,$format[15],$dc[1],$dc[2],$dc[3],$dc[4],\
          $dc[5],$dc[6],$dc[7],$dc[8],$dc[9])


	"** Construct index string to to attach to base name ******"
	format($count+10000,5,0):$index
	substr($index,3,3):$index
	$fdffile = ''
	$fdffile = seqfil+$index+'.fdf'
	rm($fdffile)
	shell('fdfgluer '+$headerfile+' B.'+$index+' '+$fdffile)
	cp($fdffile,curexp+'/recon')
	echo('creating '+$fdffile)
	rm('B.'+$index)
        $count = $count + 1
      until ($count = $expnum)

	"** Remove excess files			     ***"
	rm('mon.out')
	rm('out')
        rm('sorthelp')
	rm('mchelp')
	rm('bphelp')
	rm('bp_cmd')
	echo('\n2D BP finished')
	write('line3','2D BP finished')
	flush
	cp(curexp+'/procpar',curexp+'/recon')
	aipDeleteData('all')
	aipLoadDir(curexp+'/recon')
	aipDisplay
	" write('line3','Use ImageBrowser to view data in '+curexp+'/datdir') "
    endif
endif

cd($w1)
