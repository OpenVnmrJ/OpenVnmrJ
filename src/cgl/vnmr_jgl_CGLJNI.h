/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class vnmr_jgl_CGLJNI */

#ifndef _Included_vnmr_jgl_CGLJNI
#define _Included_vnmr_jgl_CGLJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCcreate
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_vnmr_jgl_CGLJNI_CCcreate
  (JNIEnv *, jobject);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCdestroy
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCdestroy
  (JNIEnv *, jobject, jlong);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCinit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCinit
  (JNIEnv *, jobject, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCrender
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCrender
  (JNIEnv *, jobject, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetOptions
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetOptions
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCresize
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCresize
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetPhase
 * Signature: (DD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetPhase
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetDataScale
 * Signature: (DD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetDataScale
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetDataPars
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetDataPars
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetDataMap
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetDataMap
  (JNIEnv *, jobject, jstring);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetDataPtr
 * Signature: ([F)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetDataPtr
  (JNIEnv *, jobject, jfloatArray);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCreleaseDataPtr
 * Signature: ([F)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCreleaseDataPtr
  (JNIEnv *, jobject, jfloatArray);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetColorArray
 * Signature: (I[FI)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetColorArray
  (JNIEnv *, jobject, jint, jfloatArray, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetScale
 * Signature: (DDDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetScale
  (JNIEnv *, jobject, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetSpan
 * Signature: (DDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetSpan
  (JNIEnv *, jobject, jdouble, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetOffset
 * Signature: (DDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetOffset
  (JNIEnv *, jobject, jdouble, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetRotation3D
 * Signature: (DDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetRotation2D
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetRotation2D
 * Signature: (DD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetRotation3D
  (JNIEnv *, jobject, jdouble, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetRotation
 * Signature: (DDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetObjectRotation
  (JNIEnv *, jobject, jdouble, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetTrace
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetTrace
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetSlice
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetSlice
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCrender2DPoint
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCrender2DPoint
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetStep
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetStep
  (JNIEnv *, jobject, jint);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetSlant
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetSlant
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetBias
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetBias
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetIntensity
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetIntensity
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetContrast
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetContrast
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetThreshold
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetThreshold
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetThreshold
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetContours
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetLimit
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetLimit
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetTransparency
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetTransparency
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetAlphaScale
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetAlphaScale
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     vnmr_jgl_CGLJNI
 * Method:    CCsetSliceVector
 * Signature: (DDDD)V
 */
JNIEXPORT void JNICALL Java_vnmr_jgl_CGLJNI_CCsetSliceVector
  (JNIEnv *, jobject, jdouble, jdouble, jdouble, jdouble);

#ifdef __cplusplus
}
#endif
#endif
