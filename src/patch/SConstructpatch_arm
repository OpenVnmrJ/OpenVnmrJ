from __future__ import print_function
import os
import glob
import sys
import string
sys.path.append(os.path.join(os.getcwd(), 'patch'))
import myShutil # for better copytree()

SConscript(os.path.join(os.pardir,'arm', 'SConstruct'))
swDir = os.path.join(os.getcwd(),os.pardir)

# ---------------   copy files and create the patch build ---------------------

# get envirnment
env = Environment(ENV = os.environ)

# define the patch name
patchTarget = '3.2_LNX_ANY_500'
readmeFile = 'Readme.arm'


# patchDir = os.path.join(swDir,os.pardir,pardir,os.pardir,
patchDirParent = os.path.join(swDir,os.pardir,os.pardir,
                         'patches',patchTarget)

cmd = 'rm -rf ' + patchDirParent
Execute(cmd);
os.makedirs(patchDirParent)

dest = os.path.join(patchDirParent,'patchmake')
src  = os.path.join(swDir,'scripts','patchmake.sh')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

patchDir = os.path.join(patchDirParent,'patch')
os.makedirs(patchDir)

# src = os.path.join(swDir,'patch','p_install_101');
# dest = os.path.join(patchDir,'p_install')
# Execute(Copy(dest,src))
# Execute(Chmod(dest,0o755))

# src = os.path.join(swDir,'patch','p_required');
# dest = os.path.join(patchDir,'p_required')
# Execute(Copy(dest,src))
# Execute(Chmod(dest,0o644))

dest = os.path.join(patchDir,'Readme')
src  = os.path.join(swDir,'patch',readmeFile)
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))
dest = os.path.join(patchDirParent,patchTarget+'.Readme')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))
#
# ---------------   Patch specific addition need to go here --------
# You can add tiems here or create a separate SConstruct.105
# eg: SConscript('SConstruct.105')
# create any neccessary vnmr-subdirectories inside the patch directory
# eg: binDir    = os.path.join(patchDir,'bin')
#     if not os.path.exists(binDir):
#         os.makedirs(binDir)
#
#---------------------------------------------------------------------
#

binDir = os.path.join(patchDir,'bin')
if not os.path.exists(binDir):
   os.makedirs(binDir)

binFileList = [
                'convertbru',
                'cptoconpar',
                'diffparams',
                'expfit',
                'fidx',
                'fileowner',
                'findLinks',
                'header_change',
                'import1Dspec',
                'jdxfid',
                'jdxspec',
                'listparam',
                'loginvjpassword',
                'Pbox',
                'PboxAdapter',
                'Pxfid',
                'Pxsim',
                'Pxspy',
                'read_raw_data',
                'rsw',
                'send2Vnmr',
                'setGifAspect',
                'spins',
                'writetrace',
                 ]
binSrc = os.path.join(swDir,'bin')
for i in binFileList:
#   print(i)
   dest = os.path.join(binDir,i)
   src  = os.path.join(binSrc,i)
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0o755))

d3FileList = [
                'compressfid',
                'ft3d',
                'getplane',
             ]
d3Src = os.path.join(swDir,'3D')
for i in d3FileList:
#   print(i)
   dest = os.path.join(binDir,i)
   src  = os.path.join(d3Src,i)
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0o755))

vnmrbgSrc = os.path.join(swDir,'vnmrbg')
dest = os.path.join(binDir,'Vnmrbg')
src  = os.path.join(vnmrbgSrc,'Vnmrbg')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

libDir = os.path.join(patchDir,'lib')
if not os.path.exists(libDir):
   os.makedirs(libDir)

libFileList = [
                'libacqcomm.so',
                 ]
libSrc = os.path.join(swDir,'ncomm')

for i in libFileList:
#   print(i)
   dest = os.path.join(libDir,i)
   src  = os.path.join(libSrc,i)
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0o755))

cmd = 'cd ' + patchDirParent + ';./patchmake patch ' + patchTarget + '; rm -f patchmake'
Execute(cmd);
