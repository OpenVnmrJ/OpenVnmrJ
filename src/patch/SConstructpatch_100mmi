from __future__ import print_function
import os
import glob
import sys
import string
sys.path.append(os.path.join(os.getcwd(), 'patch'))
import myShutil # for better copytree()

swDir = os.path.join(os.getcwd(),os.pardir)

# ---------------   copy files and create the patch build ---------------------

# get envirnment
env = Environment(ENV = os.environ)

# define the patch name
patchTarget = '4.2_LNX_MMI_103'
readmeFile = 'Readme.101mmi'


# patchDir = os.path.join(swDir,os.pardir,pardir,os.pardir,
patchDirParent = os.path.join(swDir,os.pardir,os.pardir,
                         'patches',patchTarget)

cmd = 'rm -rf ' + patchDirParent
Execute(cmd);
os.makedirs(patchDirParent)

dest = os.path.join(patchDirParent,'patchmake')
src  = os.path.join(swDir,'scripts','patchmake.sh')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

patchDir = os.path.join(patchDirParent,'patch')
os.makedirs(patchDir)

src = os.path.join(swDir,'patch','p_install_102');
dest = os.path.join(patchDir,'p_install')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

dest = os.path.join(patchDir,'Readme')
src  = os.path.join(swDir,'patch',readmeFile)
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))
dest = os.path.join(patchDirParent,patchTarget+'.Readme')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))
#
# ---------------   Patch specific addition need to go here --------
# You can add tiems here or create a separate SConstruct.105
# eg: SConscript('SConstruct.105')
# create any neccessary vnmr-subdirectories inside the patch directory
# eg: binDir    = os.path.join(patchDir,'bin')
#     if not os.path.exists(binDir):
#         os.makedirs(binDir)
#
#---------------------------------------------------------------------
#

binDir    = os.path.join(patchDir,'bin')
if not os.path.exists(binDir):
   os.makedirs(binDir)

src  = os.path.join(swDir,'vnmrbg','Vnmrbg')
dest = os.path.join(binDir,'Vnmrbg')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))
Execute('cd '+binDir+'; ln Vnmrbg Vnmr')

src  = os.path.join(swDir,'scripts','vnmrseqgen.sh')
dest = os.path.join(binDir,'vnmrseqgen')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))
src  = os.path.join(swDir,'scripts','loginpasswordcheck.sh')
dest = os.path.join(binDir,'loginpasswordcheck')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

javaDir = os.path.join(patchDir,'java')
if not os.path.exists(javaDir):
   os.makedirs(javaDir)

# copy files to the patch directory
src  = os.path.join(swDir,'vnmrj','vnmrj.jar.pro')
dest = os.path.join(javaDir,'vnmrj.jar')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))

src  = os.path.join(swDir,'jaccount','account.jar.pro')
dest = os.path.join(javaDir,'account.jar')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))

macDir = os.path.join(patchDir,'maclib')
if not os.path.exists(macDir):
   os.makedirs(macDir)

maclibFileList = [
          'proshimEdit',
          'psGshim',
          'ExpSetupModule',
          'Fobs',
          'ProbePopup',
          'psLock',
          'vsadj',
          'ProshimPopup',
          'spShow',
          'psMain',
          'updateExpSelector',
          'personalogin',
          '_probe',
          'Hdec',
          'ProbeEdit',
          'ProbePopup',
          'coldprobe',
          'setrc',
          'go',
          'Studyprobecal',
          ]

for i in maclibFileList:
    dest = os.path.join(macDir,i)
    src  = os.path.join(swDir,'maclib',i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

cpmaclibFileList = [
          'std1D',
          'updateprobe',
          'walkupQ_resumeq',
          'xmhaha_fastSQ',
          'xmhaha_subSQ',
          'cpgo',
          'operatorlogin',
          'gmapsolv',
          'showacqlog',
          ]

for i in cpmaclibFileList:
    dest = os.path.join(patchDir,'maclib',i)
    src  = os.path.join(swDir,'chempack','maclib',i)
    Execute(Copy(dest,src))

vpmacDir = os.path.join(patchDir,'veripulse','maclib')
if not os.path.exists(vpmacDir):
   os.makedirs(vpmacDir)

vpmaclibFileList = [
          'C13sens_process',
          'C13SN_process',
          'VPcsv',
          ]

for i in vpmaclibFileList:
    dest = os.path.join(vpmacDir,i)
    src  = os.path.join(swDir,'veripulse','maclib',i)
    Execute(Copy(dest,src))

vpDir    = os.path.join(patchDir,'veripulse','probe_specs')
if not os.path.exists(vpDir):
   os.makedirs(vpDir)

vpProbeFileList = [
          'specs_600_cold',
          ]

vpSrc  = os.path.join(swDir,'veripulse','probe_specs')
for i in vpProbeFileList:
    dest = os.path.join(vpDir,i)
    src  = os.path.join(vpSrc,i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

biomacDir = os.path.join(patchDir,'biopack','maclib')
if not os.path.exists(biomacDir):
   os.makedirs(biomacDir)

biomaclibFileList = [
          'BPeject',
          ]

for i in biomaclibFileList:
    dest = os.path.join(biomacDir,i)
    src  = os.path.join(swDir,'biopack','maclib',i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

imageDir = os.path.join(patchDir,'imaging','maclib')
if not os.path.exists(imageDir):
   os.makedirs(imageDir)
src  = os.path.join(swDir,'maclib','Mbpreco')
dest = os.path.join(imageDir,'Mbpreco')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))

manDir = os.path.join(patchDir,'manual')
if not os.path.exists(manDir):
   os.makedirs(manDir)

manFileList = [
          'dss',
          'zerofillfid',
          'go',
          ]

for i in manFileList:
    dest = os.path.join(manDir,i)
    src  = os.path.join(swDir,'manual',i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

admDir = os.path.join(patchDir,'adm','walkupadm')
if not os.path.exists(admDir):
   os.makedirs(admDir)

src  = os.path.join(swDir,'chempack','adm','walkupadm','ProbeStyleList')
dest = os.path.join(admDir,'ProbeStyleList')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))

annoteDir = os.path.join(patchDir,'templates','vnmrj','annotation')
if not os.path.exists(annoteDir):
   os.makedirs(annoteDir)

src  = os.path.join(swDir,'templates','annotation','plotHeader.tmpl')
dest = os.path.join(annoteDir,'plotHeader.tmpl')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o644))

acqbinDir    = os.path.join(patchDir,'acqbin')
if not os.path.exists(acqbinDir):
   os.makedirs(acqbinDir)

src  = os.path.join(swDir,'expproc','Expproc')
dest = os.path.join(acqbinDir,'Expproc')
Execute(Copy(dest,src))
Execute(Chmod(dest,0o755))

templateDir = os.path.join(patchDir,'templates','vnmrj','interface')
if not os.path.exists(templateDir):
   os.makedirs(templateDir)

xmlFileList = [
                'ProshimPopup.xml',
                'ProshimEdit.xml',
                 ]
xmlSrc = os.path.join(swDir,'xml')

for i in xmlFileList:
#   print(i)
   dest = os.path.join(templateDir,i)
   src  = os.path.join(xmlSrc,i)
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0o644))

pnnDir = os.path.join(patchDir,'templates','vnmrj','protocols_nn')
if not os.path.exists(pnnDir):
   os.makedirs(pnnDir)
pnyDir = os.path.join(patchDir,'templates','vnmrj','protocols_ny')
if not os.path.exists(pnyDir):
   os.makedirs(pnyDir)
pynDir = os.path.join(patchDir,'templates','vnmrj','protocols_yn')
if not os.path.exists(pynDir):
   os.makedirs(pynDir)
pyyDir = os.path.join(patchDir,'templates','vnmrj','protocols_yy')
if not os.path.exists(pyyDir):
   os.makedirs(pyyDir)

protocolFileList = [
                'ATCalib.xml',
                'ATN15Calib.xml',
                'BenzCalib.xml',
                'HOMO2DJ.xml',
                'ch3iCalib.xml',
                'ch3iPCalib.xml',
                'f19Calib.xml',
                'p31Calib.xml',
                'z0gmap.xml',
                 ]

for i in protocolFileList:
    src  = os.path.join(swDir,'inova','templates','vnmrj','protocols_yy',i)
    dest = os.path.join(pnnDir,i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))
    dest = os.path.join(pnyDir,i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))
    dest = os.path.join(pynDir,i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))
    dest = os.path.join(pyyDir,i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

psgDir = os.path.join(patchDir,'psg')
if not os.path.exists(psgDir):
   os.makedirs(psgDir)

nvpsgFileList = [
                   'solidelements.h',
                 ]

for i in nvpsgFileList:
    dest = os.path.join(psgDir,i)
    src  = os.path.join(swDir,'nvpsg',i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

# Does this work for merc. Probably not
psgFileList = [
                   'macros.h',
                   'looping.c',
                 ]

for i in psgFileList:
    dest = os.path.join(psgDir,i)
    src  = os.path.join(swDir,'psg',i)
    Execute(Copy(dest,src))
    Execute(Chmod(dest,0o644))

cmd = 'cd ' + patchDirParent + ';./patchmake patch ' + patchTarget + '; rm -f patchmake'
Execute(cmd);
