import os
import sys

# MAC -> darwin, Linux -> linux2
platform = sys.platform


#
# define function to convert SUA paths to Windows

def Sua2WinPath(suaPath):
   if ( '/dev/fs/' in suaPath ):
     dLetter = suaPath[8:9]
     # print dLetter
     return dLetter + ':' + suaPath[9:]
   else:
      return suaPath

print 'SConstruct.common'
#get current working directory
cwd = os.getcwd()


obsoleteList = 	['isjpsgup',
                'killjpsg',
               'lnvsetacq2',
               'loadkernel',
               'tryquitjpsg',
               'Vn',
               'vnmr']

acqList    = 	['bootr',
                'cryoclient',
                'cryomon',
                'execkillacqproc',
                'killstat',
                'makesuacqproc',
                'protune',
                'rmipcs',
                'set_tunehw'
		]

ddrAcqList  =   [
                'mkprobeifc',
                'probeid',
                'probe_mount',
                'probe_unmount',
	        'restore3x',
                'rsu_bt_setup',
                ]

fileList    = 	['adddevices',
                'calcramp',
                'chkinstall',
                'chksudocmd',
                'cln3dwait',
                'convertgeom',
                'create_pgsql_user',
		'dbsetup',
                'dbupdate',
                'dicom_ping',
                'dicom_store',
                'diffparam',
                'doAcct',
                'dtsharcntrl',
                'enter',
                'fixpsg',
                'getgroup',
                'getuserinfo',
                'htmltopdf',
                'jdeluser',
                'jtestgroup',
                'jtestuser',
                'jvnmruser',
                'killft3d',
                'loginpassword',
                'loginpasswordcheck',
                'loginpasswordVJ',
                'makeadminfiles',
                'makeuser',
                'managedb',
                'managelnxdev',
                'ovjGetpipe',
                'ovjPasswd',
                'ovjUser',
                'patchinstall_ver1',
                'patchinstall',
                'patchmake',
                'patchuninstall',
                'protopub',
                'psggen',
                'S99pgsql',
                'seqgen',
                'seqgenupdate',
                'setupbashenv',
                'setuserpsg',
                'showcraftbglog',
                'simplemovie',
                'status',
                'submit2craft',
                'sudoins',
                'turbovnc',
                'turbovncsetup',
                'turbovncserver',
                'update_OpenVnmrJ',
                'vbg',
                'vjhelp',
                'vnmr_accounting',
                'vnmr_cdump',
                'vnmr_color',
                'vnmr_fallocate',
                'vnmr_gs',
                'vnmr_ihelp',
                'vnmr_jplot',
                'vnmr_open',
                'vnmr_options',
                'vnmr_setgauss',
                'vnmr_showfit',
                'vnmr_singleline',
                'vnmr_spinner',
                'vnmr_temp',
                'vnmr_textedit',
                'vnmr_uname',
                'vnmr_usemark',
                'vnmr_vi',
                'vnmrauto',
                'vnmrbayes',
                'vnmredit',
                'vnmremail',
                'vnmrj',
                'vnmrlp',
                'vnmrpipe',
                'vnmrplot',
                'vnmrprint',
                'vnmrseqgen',
                'vnmrshell',
                'vxrTool',
                'xmlToCsv',
                'wtgen']

pythonScriptFiles = [ 'cmpsha1.py',
                      'modxorg.py',
                'sha1snapshot.py' ]

scriptFiles = [ 'vwScript',
             'vwScriptPPC',
             'vwAutoScript' ]

InterixScriptFiles = [ 'makeuser_interix' ]

vnmrBinPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'vnmr','bin')
if not os.path.exists(vnmrBinPath) :
    os.makedirs(vnmrBinPath)

for i in fileList:
   dest = os.path.join(vnmrBinPath,i)
   Execute(Copy(dest,i+'.sh'))
   Execute(Chmod(dest,0755))

for i in pythonScriptFiles:
   dest = os.path.join(vnmrBinPath,i)
   Execute(Copy(dest,i))
   Execute(Chmod(dest,0755))

dest = os.path.join(vnmrBinPath,'addhttp.pl')
Execute(Copy(dest,'addhttp.pl'))

dest = os.path.join(vnmrBinPath,'p_install')
Execute(Copy(dest,'p_install'))
Execute(Chmod(dest,0644))
dest = os.path.join(vnmrBinPath,'muttrc')
Execute(Copy(dest,'muttrc'))
Execute(Chmod(dest,0644))

if ('darwin' in platform):
   i = "com.edb.launchd.postgresql.plist"
   dest = os.path.join(vnmrBinPath,i)
   Execute(Copy(dest,i))
   Execute(Chmod(dest,0755))

if ( ('darwin' not in platform) and ('interix' not in platform) ):
   for i in acqList:
      dest = os.path.join(vnmrBinPath,i)
      Execute(Copy(dest,i+'.sh'))
      Execute(Chmod(dest,0755))

   acqPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'console','ddr','bin')
   if not os.path.exists(acqPath) :
       os.makedirs(acqPath)
   for i in ddrAcqList:
      dest = os.path.join(acqPath,i)
      Execute(Copy(dest,i+'.sh'))
      Execute(Chmod(dest,0755))

   dest = os.path.join(acqPath,'setacq')
   Execute(Copy(dest,'lnvsetacq.sh'))
   Execute(Chmod(dest,0755))
   vnmrAcqBinPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'vnmr','acqbin')
   if not os.path.exists(vnmrAcqBinPath) :
       os.makedirs(vnmrAcqBinPath)
   dest = os.path.join(vnmrAcqBinPath,'rc.vnmr')
   Execute(Copy(dest,'rc.vnmr.sh'))
   Execute(Chmod(dest,0644))
   dest = os.path.join(vnmrAcqBinPath,'99-CP210x.rules')
   Execute(Copy(dest,'99-CP210x.rules'))
   Execute(Chmod(dest,0644))
   dest = os.path.join(vnmrBinPath,'airjet')
   Execute(Copy(dest,'airjet.sh'))
   Execute(Chmod(dest,0755))
   acqPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'console','inova','bin')
   if not os.path.exists(acqPath) :
       os.makedirs(acqPath)
   dest = os.path.join(acqPath,'setacq')
   Execute(Copy(dest,'lsetacq.sh'))
   Execute(Chmod(dest,0755))
   dest = os.path.join(acqPath,'loadkernel')
   Execute(Copy(dest,'loadkernel.sh'))
   Execute(Chmod(dest,0755))
   acqPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'console','mercury','bin')
   if not os.path.exists(acqPath) :
       os.makedirs(acqPath)
   dest = os.path.join(acqPath,'setacq')
   Execute(Copy(dest,'lsetacq.sh'))
   Execute(Chmod(dest,0755))
   dest = os.path.join(acqPath,'loadkernel')
   Execute(Copy(dest,'loadkernel.sh'))
   Execute(Chmod(dest,0755))

   acqPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'console','inova','acq')
   if not os.path.exists(acqPath) :
       os.makedirs(acqPath)
   acq2Path = os.path.join(cwd,os.pardir,os.pardir,os.pardir,'console','mercury','acq')
   if not os.path.exists(acq2Path) :
       os.makedirs(acq2Path)
   for i in scriptFiles:
      dest = os.path.join(acqPath,i)
      Execute(Copy(dest,i+'.sh'))
      Execute(Chmod(dest,0755))
      dest = os.path.join(acq2Path,i)
      Execute(Copy(dest,i+'.sh'))
      Execute(Chmod(dest,0755))

if ('interix' in platform):
   # copy isADmin for Intgerix systems
   dest = os.path.join(vnmrBinPath,'isAdmin')
   src = os.path.join(cwd,'isAdmin.sh')
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0755))
   dest = os.path.join(vnmrBinPath,'makeuser')
   src = os.path.join(cwd,'makeuser_interix.sh')
   Execute(Copy(dest,src))
   Execute(Chmod(dest,0755))
   #
   # option to the batch to exec application
   #
   #  -icon [filename]   The icon file of your application 
   #   -invisible   Create an invisible application 
   #   -temp   Use the temporary directory on execution 
   #   -nodelete   Do not delete the temporary files 
   #   -encrypt [Password]   Encrypt the program with a password 
   #   -admin   Add an administrador manifest to the program 
   #   -overwrite   Overwrite existing files 
   #   -decompiler [String]   Add a decompiler to the program 
   #   -include [filename]   Include additional files to the program 
   #   -fileversion [String]   File version number 
   #   -productversion [String]   Product version number 
   #   -company [String]   Company name 
   #   -productname [String]   Product name 
   #   -internalname [String]   Internal name 
   #   -description [String]   Product description 
   #   -copyright [String]   Copyright 
   
   bat2exe=os.path.join(cwd,os.pardir,os.pardir,'3rdParty','winBatch2Exe','Bat_To_Exe_Converter.exe')
   company=' -company "Agilent LSG-RPD"'
   product=' -productname "VnmrJ"'
   iconpath= os.path.join(cwd,os.pardir,'iconlib','vnmrbg_iconlib')
   batpath=Sua2WinPath(os.path.join(cwd,'vnmrj.bat'))
   exepath=Sua2WinPath(os.path.join(cwd,'VnmrJb.exe'))
   icon=Sua2WinPath(os.path.join(iconpath,'vnmrj_classic.ico'))

   rmcmd='rm ' + 'VnmrJ*.exe'
   cmdaction=bat2exe + ' -overwrite  -bat ' + batpath + ' -save ' + exepath + ' -icon ' + icon  + company + product
   #Execute(Action(cmdaction))   doesn't work, windows app gives error so use the os.system call directly
   print rmcmd
   print cmdaction
   os.system(rmcmd) 
   os.system(cmdaction)
   dest = os.path.join(vnmrBinPath,'VnmrJb.exe')
   Execute(Copy(dest, os.path.join(cwd,'VnmrJb.exe')))
   Execute(Chmod(dest,0755))
   dest = os.path.join(vnmrBinPath,'vnmrj.bat')
   Execute(Copy(dest, os.path.join(cwd,'vnmrj.bat')))
   Execute(Chmod(dest,0755))

   dest = os.path.join(vnmrBinPath,'convert')
   Execute(Copy(dest,'convert.sh'))
   Execute(Chmod(dest,0755))

   batpath=Sua2WinPath(os.path.join(cwd,'vnmrjadmin.bat'))
   exepath=Sua2WinPath(os.path.join(cwd,'VnmrJ_Adminb.exe'))
   icon=Sua2WinPath(os.path.join(iconpath,'vnmrjadmin.ico'))
   cmdaction=bat2exe + ' -overwrite  -bat ' + batpath + ' -save ' + exepath + ' -icon ' + icon  + company + product
   print cmdaction
   os.system(cmdaction)
   dest = os.path.join(vnmrBinPath,'VnmrJ_Adminb.exe')
   Execute(Copy(dest, os.path.join(cwd,'VnmrJ_Adminb.exe')))
   Execute(Chmod(dest,0755))
   dest = os.path.join(vnmrBinPath,'vnmrjadmin.bat')
   Execute(Copy(dest, os.path.join(cwd,'vnmrjadmin.bat')))
   Execute(Chmod(dest,0755))
