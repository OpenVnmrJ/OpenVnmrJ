/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */

/*----------------------------------------------------------------------
|
|	Header file for Common Acquisition - Sun  definitions
|
+----------------------------------------------------------------------*/

/* --- Has anyone else already typedef these,check on other header files --- */
#if  !defined(SUN_HAL) && !defined(ACQ_HALstruc) && !defined(OOPC)

/* ---- type definitions for consistency between Acquisition & Sun --- */
#ifdef SUN
typedef char  c68char;
typedef short c68int;
typedef long  c68long;
typedef unsigned long  c68ulong;
#else
typedef char  c68char;
typedef int   c68int;
typedef long  c68long;
typedef unsigned long  c68ulong;
#endif

#endif

/* --- define this header file name for conditional compile use of others */
#define ACQ_SUN

/* ----   valid_data is set accordingly for validation --- */
#define FALSE_STRUC	0
#define LK_STRUC 	1
#define SHIM_STRUC 	2
#define	FID_STRUC	3
#define	INIT_STRUC	4
#define	EXP_STRUC	5
#define WORKING		1
#define	FINISHED	0

/*  These status codes come from Acqproc itself, not the VM02 or the HAL.
    The are less than 0 to conform with an informal convention that a
    negative return value implies an error or problem has occurred.  In
    addition, a negative value will distinguish HAL/VM02 status codes
    from Acqproc status codes.						*/

#define EXP_ACTIVE	-2
#define ACQI_ACTIVE	-3
#define CVT_ERROR	-4
#define HAL_ERR1	-11
#define HAL_ERR2	-12
#define HAL_ERR3	-13
#define HAL_ERR4	-14

/*---- Interactive Status Structure --- */
struct ia_stat {
		c68int	valid_data;	/* see #define-s above */
		c68int	LSDV;	   	/* lock, spin, decoupler, VT status */
		c68int	lk_lvl;		/* lock level */
		c68int	lk_gain;	/* lockgain */
		c68int	lk_power;	/* lockpower */
		c68int	lk_phase;	/* lockphase */
		c68int	spinspd;	/* spin speed in RPS */
		c68int	spinrate;	/* spin rate, airflow delay */
		c68int	VT_temp;	/* current VT temperature read */
		c68int	rcvr_gain;	/* receiver gain */
		c68int	sh_smplx;	/* are we doing simplex? */
		c68int	sh_dacs[48];	/* all shimdacs */
		c68int	adc_size;	/* number of adc bits */
                c68long neg_ct;         /* negative ct value for FID display */
		c68int	filler;		/* fill to 128 bytes = mailbox size */
		};

/* --- Lock Mode Values --- */
#define LKOFF		0
#define LKON		1
#define AUTOLKON 	3

/*---------------------------------------------------------------
|
|       Done Codes returned to Acqproc
|
+----------------------------------------------------------------*/
#define EXP_NULL_CASE 0
#define EXP_FID_CMPLT 11
#define BS_CMPLT      12
#define SOFT_ERROR    13
#define WARNING_MSG   14
#define HARD_ERROR    15
#define EXP_ABORTED   16
#define SETUP_CMPLT   17
#define STOP_CMPLT    18
#define FIX_ACQSTAT   19

/*  Added Pseudo Done Codes:  EXP_COMPLETE, EXP_STARTED.  These values
    are not returned by HAL; rather they are generated by acqProc.  For
    example, EXP_COMPLETE is a subset of the EXP_FID_CMPLT code, returned
    by HAL.  The acqProc program determines whether the FID just received
    completes the experiment; then sends the appropriate code to the
    Master using the acqstatus command.                         RL 04/27/87  */

#define EXP_COMPLETE  101
#define EXP_STARTED   102


/*---------------------------------------------------------------
|
|       Setup Codes returned to Acqproc  (aliases of GO)
|
|       Never change these defines!
+----------------------------------------------------------------*/
#define EXEC_SU         1
#define EXEC_SHIM       2
#define EXEC_LOCK       3
#define EXEC_SPIN       4
#define EXEC_CHANGE     5
#define EXEC_SAMPLE     6
#define EXEC_EXPTIME	101	/* does not generate acodes */
#define EXEC_DPS	102	/* does not generate acodes */

/* --- interactive hardware commands --- */
#define LKMODE		1
#define LKPOWER		2
#define LKGAIN		3
#define LKPHASE		4
#define INSERT		5
#define EJECT		6
#define BEARON		7
#define BEAROFF		8
#define SETSPD		9
#define SETRATE		10
#define GETSPD		11
#define GETRATE		12
#define SHIMDAC		13
#define GETDAC		14
#define GETSTATUS	15
#define CODECHG		16
#define INFIFO		17
#define LK_GAIN		3
#define LK_PWR		2
#define LK_PHS		4
#define LK_LVL		18
#define TWEAK		19
#define SET_DAC		20
#define SEL_SET		21
#define SHIMI		22
#define SPN_STA		23
#define RTN_SHLK	24
#define FIX_ACODE	25
#define SET_ATTN	26
#define	RCVRGAIN	27
#define STARTTUNE	28
#define STOPTUNE	29
#define WSRAM		30
#define RSRAM		31
#define SET_TUNE	32
#define RESET_VT	33
#define SETLOC		34
#define SETMASTHRES	35
#define SYNC_FREE       36
#define LKRATE		37
#define SETBEARSPAN     38
#define SETBEARADJ      39
#define SETBEARMAX      40
#define SETASP          41
#define SETSTATUS       46
#define SETPROFILE      47
#define MASOFF          48
#define MASON           49
#define BEARING		50
#define EJECTOFF        82

/*  new change codes, defined for VNMR 5.3, starting in June 1996
    start at 51, there are INOVA-specific change codes up thru 46 */

#define SETTEMP		51
#define BUMPSAMPLE	52
#define READLKLVL	53
#define LKFREQ		54
#define STATRATE	55

/* Keep values in the following block sequential */
#define GTUNE_PX	56
#define GTUNE_IX	57
#define GTUNE_RX	58
#define GTUNE_PY	59
#define GTUNE_IY	60
#define GTUNE_RY	61
#define GTUNE_PZ	62
#define GTUNE_IZ	63
#define GTUNE_RZ	64
#define GPAENABLE	65
#define GPASTATUS	66
/* End sequential value block */
#define VTAIRFLOW	75
#define VTAIRLIMITS	76
#define PNEUFAULT	77
#define EJECTAIR	78
#define IPII		79

/* for fixing of acodes */
#define DELAY_TYPE	111

/*  shim criteria definitions  */

#define LOOSE 1
#define MEDIUM 2
#define TIGHT 3
#define EXCELLENT 4


/*  task definitions for autotask  */

#define SH_ALOCK 1
#define SH_ASHIM 2
#define INTOVF 32767

/* acquisition bit mask definitions for global settings */
#define HSROTORBIT 0x0001
#define MLEG_SIS_PIC 0x10	/* Id on magnet leg driver board for SIS PIC */
#define MLEG_LGSIGMODE 0x01	/* Id on magnet leg driver board for U+      */
				/* Preamps with selectable Large-Signal Mode */

/* SIS defines for table indexing			*/
/* acquisition Global segment Definitions for use in 	*/
/* indexing into the desired global segment in acq. 	*/
#define	ACQ_LC_GSEG	0 
#define	ACQ_ACODE_GSEG	1 
#define	ACQ_FID_GSEG	2 
#define	ACQ_RF_GSEG	3 
#define	ACQ_GRAD_GSEG	4 
#define	ACQ_XPAN_GSEG	5 
