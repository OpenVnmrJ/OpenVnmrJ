#!

from __future__ import print_function
import os
import sys
import shutil
import datetime
import string
import platform

# current working directory
cwd = os.getcwd()
ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
# If not defined, try the default location
    print("OVJ_TOOLS env not found. Trying default location.")
    ovjtools = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'ovjTools')

if not os.path.exists(ovjtools):
    print("OVJ_TOOLS env not found.")
    print("For bash and variants, use export OVJ_TOOLS=<path>")
    print("For csh and variants,  use setenv OVJ_TOOLS <path>")
    sys.exit(1)

platform = sys.platform
print(sys.platform)

#
# On Ubuntu 20, the jar action fails
# I think it is a problem in scons version 3.
# vers = 18
# if os.path.exists('/etc/lsb-release'):
#    with open('/etc/lsb-release') as fd:
#       for line in fd:
#          if (line.startswith('DISTRIB_RELEASE')):
#             name,vers = line.split("=")
#             vers,decimal = vers.split(".")   
# 
# version= int(vers)
#
# CentOS 7.8 also fails. Rather than trying to determine
# if scons 2 or 3 is being used, just always use the scheme
# for scons 3, which also works for scons 2.

version=20


# If java 6 is being used
if os.path.exists(os.path.join(ovjtools,'java','bin','javaws')):
   Execute(Copy(os.path.join('src','vnmr','ui','PasswordService.java'),'PasswordService.java6'))


# target
vnmrjTarget = 'vnmrj.jar'
vnmrjDashOTarget = "vnmrj.jar.dasho"
vnmrjProGuardTarget = "vnmrj.jar.pro"
vjmolTarget = 'vjmol.jar'


# file base path
fbpath= cwd



# jar file lists
jarHelpFileList = [os.path.join(fbpath, 'jh.jar'),
                   os.path.join(fbpath, 'jhall.jar'),
                   os.path.join(fbpath, 'jhbasic.jar'),
                   os.path.join(fbpath, 'jhtools.jar'),
                   os.path.join(fbpath, 'jsearch.jar')]

jarFileList = [os.path.join(fbpath, 'gluegen-rt.jar'),
               os.path.join(fbpath, 'jogl-all.jar'),
               os.path.join(fbpath, 'lcaccess.jar'),
               os.path.join(fbpath, 'msaccess.jar'),
               os.path.join(fbpath, 'pdaaccess.jar'),
               os.path.join(fbpath, 'postgresql.jar'),
               os.path.join(fbpath, 'JTattoo.jar'),
               os.path.join(fbpath, 'xml.jar')]

propFileList = """
                            AdmLabels_ja.properties
                            Labels_ja.properties
                            Options.properties
                            AdmLabels.properties
                            Labels.properties
                            ShimLabels.properties
                            AdmLabels_zh_CN.properties
                            Labels_zh_CN.properties
                            """.split()


ThirdPartyJarPath = os.path.join(ovjtools, 'JavaPackages')
ThirdPartyList = ['jmol.jar']

env = Environment()
#platform = env['PLATFORM']

# Java envs
# JAVABOOTCLASSPATH []
# JAVAC javac
# JAVACCOM ${TEMPFILE('$_JAVACCOM')}
# JAVACFLAGS
# JAVACLASSPATH []
# JAVACLASSSUFFIX .class
# JAVASOURCEPATH []

# paths
classPath = cwd


if (platform.startswith('linux')):
   javaBinDir = os.path.join(ovjtools, 'java', 'bin')
   jarBin = os.path.join(javaBinDir, 'jar')
elif (platform=="darwin"):
   javaBinDir = os.path.join('/', 'usr', 'bin')
   jarBin = os.path.join(javaBinDir, 'jar')
#  Execute('rm -rf ' + os.path.join('src','vnmr','lc'))
#  Execute('rm -f ' + os.path.join('src','vnmr','util','CorbaClient.java'))
#  Execute('rm -f ' + os.path.join('src','vnmr','bo','VMsStatusButton.java'))
#  Execute('rm -f ' + os.path.join('src','vnmr','bo','VStatusButton.java'))
#  Execute('rm -f ' + os.path.join('src','vnmr','templates','LayoutBuilder.java'))
#  Execute('rm -f ' + os.path.join('src','vnmr','ui','ExpPanel.java'))
#  Execute(Copy(os.path.join('src','vnmr','bo','VStatusButton.java'),
#               os.path.join('macos','VStatusButton.java')))
#  Execute(Copy(os.path.join('src','vnmr','templates','LayoutBuilder.java'),
#               os.path.join('macos','LayoutBuilder.java')))
#  Execute(Copy(os.path.join('src','vnmr','ui','ExpPanel.java'),
#               os.path.join('macos','ExpPanel.java')))
else: 
   print("Unknown Platform: ", platform)
   sys.exit()

#print(javaBinDir)
#print(jarBin)

# make sure the path(s) exist
classesPath = os.path.join(cwd, 'classes')
if not os.path.exists(classesPath):
   os.makedirs(classesPath)



# method to copy files to remote directory
def copyFilesHere(path, fileList):
   for i in fileList:
      shutil.copy(os.path.join(path, i), i)

# copy jmol.jar to local directory
copyFilesHere(ThirdPartyJarPath, ThirdPartyList)


# actions to perform at interpretation time
# define with absolute path where built files will be copied
installPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'java')
# make sure the path(s) exist
if not os.path.exists(installPath):
   os.makedirs(installPath)

for i in jarFileList:
   Execute('cd ' + classesPath + ' && ' + jarBin + ' -xf ' + i)
for i in jarHelpFileList:
   Execute('cd ' + classesPath + ' && ' + jarBin + ' -xf ' + i)

# Remove manifest stuff, if gets in the way
Execute('rm -rf ' + os.path.join(classesPath, 'META-INF'))

# copy properties files to classes/properties directory
Execute('rm -rf ' + os.path.join(classesPath, 'vnmr') + ' && ' + \
        'cp -r ' + os.path.join(cwd, 'src', 'vnmr') + ' ' + classesPath)

# define vjmol environment
vjmolPath = os.path.join(cwd, 'vjmol')
Execute(Mkdir(vjmolPath))

if (platform!="darwin"):
   vjmolEnv  = Environment(ENV = {'JAVA_HOME' : javaBinDir,
                                  'CLASSPATH' : os.path.join(cwd, 'jmol.jar'),
                                  'PATH' : javaBinDir + ':' + os.environ['PATH']})

   # define build environment
   jEnv = Environment(ENV = {'JAVA_HOME' : javaBinDir,
                             'CLASSPATH' : classesPath,
                             'PATH' : javaBinDir + ':' + os.environ['PATH']})
elif (platform=="darwin"):
   if not "JAVA_HOME" in os.environ:
      os.environ['JAVA_HOME'] = os.popen('/usr/libexec/java_home -v 1.8').read()

   vjmolEnv  = Environment(ENV = {'CLASSPATH' : os.path.join(cwd, 'jmol.jar'),
                                  'JAVA_HOME' : os.environ['JAVA_HOME'],
                                  'PATH' : javaBinDir + ':' + os.environ['PATH']})

   # define build environment
   jEnv = Environment(ENV = {'CLASSPATH' : classesPath,
                             'JAVA_HOME' : os.environ['JAVA_HOME'],
                             'PATH' : javaBinDir + ':' + os.environ['PATH']})


print(jEnv['ENV'])
#print(jEnv['JAVAC'])
#print(jEnv['JAVACLASSPATH'])
#dict = jEnv.Dictionary()
#keys = dict.keys()
#keys.sort()
#for key in keys:
#   print(key, dict[key])


# just a double check of which javac is being used for the build
jEnv.Execute('which javac')

# actual VJMol.jar build
javaBuildVJMol = vjmolEnv.Java(source = os.path.join(cwd, 'vjmol_src'),
                               target = vjmolPath)

findAction = 'find ' + os.path.join(cwd,'classes') + ' \( -name "*.java" -o -name "*.out" \) -exec rm -f {} \;'
findAction2 = findAction

# Do jar action here on Ubuntu 20
if ( version > 19 ):
  findAction2 = findAction+'; cd '+cwd+' && '+ jarBin+' cfm vnmrj.jar Manifest -C classes . ; cp '+ os.path.join(cwd, vnmrjTarget)+' '+installPath

# print(findAction)
vjmolEnv.AddPostAction(javaBuildVJMol,
                       Action(findAction))
vjmolBuildObject = vjmolEnv.Jar(JAR      = jarBin,
                                  source   = vjmolPath,
                                  target   = vjmolTarget,
                                  JARCHDIR = vjmolPath)

# actual builds
srcPath = os.path.join(cwd, 'src')
javaBuildObject = jEnv.Java(JAVACFLAGS = '-J-mx256m',
                            target     = classesPath,
                            source     = srcPath)

todaysDate = datetime.datetime.now().strftime("%B %e, %Y %T %Z")
manifestFile = os.path.join(cwd, 'Manifest')
f = open(manifestFile, 'w')
f.write('Manifest-Version: 1.0 ')
f.write(todaysDate)
f.write('\n')
f.write('Main-Class: vnmr.ui.VNMRFrame\n')
f.close()

#jEnv.AddPostAction(javaBuildObject,
#                   Action(os.path.join(cwd,'removeJava.sh')))

# print(findAction)
jEnv.AddPostAction(javaBuildObject,
                   Action(findAction2))

# This jar action fails on Ubuntu 20
if ( version <= 19 ):
    jarBuildObject = jEnv.Jar(JAR      = jarBin,
                            target   = vnmrjTarget,
                            source   = [classesPath,
                                        manifestFile],
                            JARCHDIR = classesPath)

binPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'bin')

moviePath = os.path.join(ovjtools, 'JMF-2.1.1e', 'src','simplemovie.jar')
Execute(Copy(os.path.join(installPath,'simplemovie.jar'), moviePath))

#jEnv.AddPostAction(jarBuildObject,
#                   Action(os.path.join(cwd,'removeJava.sh')))

# actions to be performed after targets are built
if ( version <= 19 ):
  jEnv.AddPostAction(jarBuildObject,
                      Action(Copy(installPath, os.path.join(cwd, vnmrjTarget))))

# finally copy vjmol.jar
vjmolEnv.AddPostAction(vjmolBuildObject,
                         Action(Copy(installPath, os.path.join(cwd, vjmolTarget))))
