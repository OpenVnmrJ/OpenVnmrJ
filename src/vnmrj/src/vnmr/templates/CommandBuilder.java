/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */

package vnmr.templates;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;

import vnmr.util.*;

/**
 * <pre>A static builder class for command and macro Statement construction.
 *  This class contains a single static method {@link vnmr.templates.CommandBuilder#build(ArrayList,String) build} that
 *  is used to build an ArrayList of {@link vnmr.ui.shuf.CommandDefinition CommandDefinition} objects
 *  by parsing an {@link vnmr.templates.CommandBuilder#build(ArrayList, String)  XML file}.
 * </pre>
 * @author		Dean Sindorf
 */
public class CommandBuilder extends Template
{
	//----------------------------------------------------------------
	/** entry point for stand-alone test. */
	//----------------------------------------------------------------
	public static void main(String argv[]) {
		ArrayList commands=new ArrayList();
		String fn=FileUtil.SYS_VNMR + "/shuffler/commands.xml";
		try{
			CommandBuilder.build(commands,fn);
		}
		catch(java.lang.Exception e){
			System.out.println("error building "+fn);
			return;
		}

		ListIterator list=commands.listIterator();
		while(list.hasNext()){
			Object obj=list.next();
			System.out.println(obj.toString());
		}
	}

	//----------------------------------------------------------------
	/** Set default class bindings for xml keywords. */
	//----------------------------------------------------------------
	protected void setDefaultKeys(){
		setKey("*Element", vnmr.templates.VCommandDefinition.class);
		setKey("shuffler",  vnmr.templates.VElement.class);
	}

    //----------------------------------------------------------------
    /**<pre>Build a CommandDefinition array by parsing an XML file.
     * <b>usage</b>
     *   ....
     *   ArrayList commands=new ArrayList();
     *   String filename="/vnmr/shuffler/commands.xml";
     *   CommandBuilder.build(commands,filename);
     *   ....
     *
     *   The method will add to ArrayList <i>commands</i>, a list of
     *   {@link vnmr.ui.shuf.CommandDefinition CommandDefinition} objects generated by parsing <i>filename</i>
     *
     *
     * <b>Format for the commands.xml file:</b>
     *      &lt ?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt
     *      &lt shuffler &gt
     *         &lt <i>command/macro name="cmd_name" attr2="val2"</i> ...  /&gt
     *         ...
     *      &lt /shuffler &gt
     *
     *   Where:
     *      command/macro => will be either "command" for vnmr commands
     *                       or "macro" for macros.
     *      cmd_name => the command or the macro name used to execute this.
     *      attr2 etc can be
     *               cmdtype   => eg., acquisition, plotting, display,
     *                            processing, pulsesequence
     *               dimension => 1D, 2D, ...
     *               seqtype   => type of pulse sequence if applicable.
     *               other attributes that may be added later.
     *
     *   Example file:
     *
     *     &lt ?xml version="1.0" encoding="UTF-8" standalone="yes"? &gt
     *
     *     &lt !--**File containing macros and vnmr commands for shuffler**--&gt
     *
     *     &lt shuffler &gt
     *             &lt !-- ***general commands*** --&gt
     *         &lt command name="aa" cmdtype="acquisition" /&gt
     *         &lt command name="dconi" cmdtype="display" dimension="2D" /&gt
     *         &lt command name="dres" cmdtype="display" dimension="1D" /&gt
     *
     *             &lt !-- ***general macros*** --&gt
     *         &lt macro name="go" cmdtype="acquisition" /&gt
     *         &lt macro name="ppa" cmdtype="plotting" /&gt
     *         &lt macro name="vsadj" cmdtype="display" dimension="1D" /&gt
	 *
     *              &lt !-- ***pulse sequence macros*** --&gt
     *         &lt macro name="dept" cmdtype="pulsesequence" dimension="2D"
     *          seqtype="heteronuc" /&gt
     *         &lt macro name="gcosy" cmdtype="pulsesequence" dimension="2D"
     *          seqtype="cosy" /&gt
     *     &lt /shuffler &gt
     *
     *
     *</pre>
     */
	//----------------------------------------------------------------
	static public void build(ArrayList commands, String fn)
		throws Exception
	{
		CommandBuilder builder=new CommandBuilder();
		try{
			builder.open(fn);
		}
		catch(java.lang.Exception e){
			System.out.println("error parsing "+fn);
			throw new Exception();
		}
		builder.build(commands,builder.rootElement());
	}

	//----------------------------------------------------------------
	/** Recursive call to build. */
	//----------------------------------------------------------------
	private void build(ArrayList commands, VElement elem){
		Enumeration     elems=elem.children();
		VElement		child;

		if(elem instanceof VCommandDefinition){
		    try {
				commands.add(((VCommandDefinition)elem).build());
				return;
		    }
		    catch (Exception e) {}
		}

		while(elems.hasMoreElements()){
			child=(VElement)elems.nextElement();
			build(commands,child);
		}
	}
}
