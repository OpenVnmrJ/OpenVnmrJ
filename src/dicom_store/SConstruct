from __future__ import print_function
import os
import sys
# top level build for the bin build category
# # current working directory
cwd = os.getcwd()
ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
# If not defined, try the default location
    print("OVJ_TOOLS env not found. Trying default location.")
    ovjtools = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'ovjTools')

if not os.path.exists(ovjtools):
    print("OVJ_TOOLS env not found.")
    print("For bash and variants, use export OVJ_TOOLS=<path>")
    print("For csh and variants,  use setenv OVJ_TOOLS <path>")
    sys.exit(1)

# define target file names
dicomStoreTargetList = ['byte_swap',
                        'create_ctn_input',
                        'create_fdf_dicom',
                        'split_fdf',
                        'create_dicom',
                        'start_server',
                        'stop_server',
                        'store_image']

# we need to specify an absolute path so this SConstruct file
# can be called from any other SConstruct file
cwd = os.getcwd()
# MAC -> darwin, Linux -> linux2
platform = sys.platform


# source files

dicom_storeEnv = Environment(CCFLAGS   = '-O -DHAVE_CONFIG_H -D_REENTRANT -DNDEBUG',
                             LINKFLAGS = '',
                             CPPPATH   = [cwd])

if ('darwin' in platform):
    dicom_storeEnv.Replace(CC = 'clang')
    dicom_storeEnv.Replace(CCFLAGS = '-Os -DHAVE_CONFIG_H -D_REENTRANT -DNDEBUG -Wno-implicit-function-declaration ')
    osxflags = os.getenv('osxflags')
    if osxflags:
       dicom_storeEnv.Append(CCFLAGS = os.getenv('osxflags'))
    dicom_storeEnv.Replace(LINKFLAGS = '-Os')

# actual builds
dicom_store_builds = []
for i in dicomStoreTargetList:
    dicom_store_builds.append(dicom_storeEnv.Program(target  = i,
                                                     source  = [i + '.c' ],
                                                     LIBPATH = [cwd]))



# for sure copy it to options/dicom/bin
optionsDicomBinPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,
			'options','standard','IMAGE','dicom','bin')
if not os.path.exists(optionsDicomBinPath) :
    os.makedirs(optionsDicomBinPath)
optionsDicomConfPath = os.path.join(cwd,os.pardir,os.pardir,os.pardir,
			'options','standard','IMAGE','dicom','conf')
if not os.path.exists(optionsDicomConfPath) :
    os.makedirs(optionsDicomConfPath)
Execute(Copy(optionsDicomConfPath, os.path.join(cwd, 'dicom_store.cfg')))

# actions to be performed after targets are built
for i in range(len(dicomStoreTargetList)):
   dicom_storeEnv.AddPostAction(dicom_store_builds[i],
                                Action(Copy(optionsDicomBinPath, os.path.join(cwd, dicomStoreTargetList[i]))))

fileList = [
            'echoscu',
            'storescp',
            'storescu',
           ]

if (platform!="darwin"):
   srcDir = os.path.join(ovjtools,'dicom3tools','dcmtk-3.5.4')
   for i in fileList:
      src = os.path.join(srcDir,i)
      dest = os.path.join(optionsDicomBinPath,i)
      Execute(Copy(dest,src))
      Execute(Chmod(dest,0o755))
