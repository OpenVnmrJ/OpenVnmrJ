#!

import os
import shutil
import datetime
import sys
sys.path.append(os.path.join(os.getcwd(), os.pardir, os.pardir, 'scripts'))
import buildMethods

# current working directory
cwd = os.getcwd()

ovjtools=os.getenv('OVJ_TOOLS')
if not ovjtools:
# If not defined, try the default location
    print "OVJ_TOOLS env not found. Trying default location."
    ovjtools = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'ovjTools')

if not os.path.exists(ovjtools):
    print "OVJ_TOOLS env not found."
    print "For bash and variants, use export OVJ_TOOLS=<path>"
    print "For csh and variants,  use setenv OVJ_TOOLS <path>"
    sys.exit(1)

# MAC -> darwin, Linux -> linux2
platform = sys.platform

# target
managedbTarget = 'managedb.jar'

# paths
if (platform!="darwin"):
   javaPath = os.path.join(ovjtools, 'java', 'bin')
else:
   javaPath = os.path.join('/', 'usr', 'bin')

ThirdPartyJarPath = os.path.join(cwd, os.pardir, 'vnmrj')
ThirdPartyJarList = ['xml.jar',
                     'postgresql.jar']

vnmrShufPath = os.path.join(cwd, os.pardir, 'vnmrj', 'src', 'vnmr', 'ui', 'shuf')
vnmrShufDstPath = os.path.join(cwd, 'src', 'vnmr', 'ui', 'shuf')
VnmrShufFileList = ['FillDBManager.java',
                    'DirFilter.java',
                    'LocAttrList.java',
                    'MountPaths.java',
                    'SavedDirList.java',
                    'Shuf.java',
                    'ShufDataParam.java',
                    'SymLinkMap.java',
                    'TrashInfo.java',
                    'CommandDefinition.java',
                    'UpdateAttributeList.java']

vnmrXmlPath = os.path.join(cwd, os.pardir, 'vnmrj', 'src', 'vnmr', 'templates')
vnmrXmlDstPath = os.path.join(cwd, 'src', 'vnmr', 'templates')
VnmrXmlFileList = ['CommandBuilder.java',
                   'ElementTree.java',
                   'Reference.java',
                   'Template.java',
                   'Types.java',
                   'VElement.java',
                   'VProtocolElement.java',
                   'VTreeNodeElement.java',
                   'VCommandDefinition.java']

vnmrBoPath = os.path.join(cwd, os.pardir, 'vnmrj', 'src', 'vnmr', 'bo')
vnmrBoDstPath = os.path.join(cwd, 'src', 'vnmr', 'bo')
VnmrBoFileList = ['VMessage.java',
                  'User.java',
                  'LoginService.java',
                  'Access.java',
                  'Group.java']

vnmrUiPath = os.path.join(cwd, os.pardir, 'vnmrj', 'src', 'vnmr', 'ui')
vnmrUiDstPath = os.path.join(cwd, 'src', 'vnmr', 'ui')
VnmrUiFileList = ['MessageListenerIF.java']

vnmrUtilPath = os.path.join(cwd, os.pardir, 'vnmrj', 'src', 'vnmr', 'util')
vnmrUtilDstPath = os.path.join(cwd, 'src', 'vnmr', 'util')
VnmrUtilFileList = ['Global.java',
                    'NumericStringComparator.java',
                    'StreamTokenizerQuotedNewlines.java',
                    'QuotedStringTokenizer.java',
                    'FileUtil.java',
                    'Messages.java',
                    'DebugOutput.java',
                    'VLabelResource.java',
                    'HashArrayList.java',
                    'UtilB.java',
                    'UNFile.java']

# make sure the path(s) exist
classesPath = os.path.join(cwd, 'classes')
if not os.path.exists(classesPath):
   os.makedirs(classesPath)

jarBin = os.path.join(javaPath, 'jar')

for i in ThirdPartyJarList:
   Execute('cp ' + os.path.join(ThirdPartyJarPath, i) + ' .')
   Execute('cd classes; ' + jarBin + ' -xf ' + os.path.join(cwd, i))

# define build environment
if (platform!="darwin"):
   jEnv = Environment(ENV = {'JAVA_HOME' : javaPath,
                          'CLASSPATH' : classesPath + ':' +
                                        os.path.join(cwd, 'xml.jar') + ':' +
                                        os.path.join(cwd, 'postgresql.jar'),
                          'PATH' : javaPath + ':' + os.environ['PATH']})
else:
   jEnv = Environment(ENV = {'CLASSPATH' : classesPath + ':' +
                                        os.path.join(cwd, 'xml.jar') + ':' +
                                        os.path.join(cwd, 'postgresql.jar'),
                          'PATH' : javaPath + ':' + os.environ['PATH']})

buildMethods.symLinkNow(jEnv, vnmrShufDstPath, vnmrShufPath, VnmrShufFileList);
buildMethods.symLinkNow(jEnv, vnmrXmlDstPath, vnmrXmlPath, VnmrXmlFileList);
buildMethods.symLinkNow(jEnv, vnmrBoDstPath, vnmrBoPath, VnmrBoFileList);
buildMethods.symLinkNow(jEnv, vnmrUiDstPath, vnmrUiPath, VnmrUiFileList);
buildMethods.symLinkNow(jEnv, vnmrUtilDstPath, vnmrUtilPath, VnmrUtilFileList);

# actual builds
srcPath = os.path.join(cwd, 'src')
javaBuildObj = jEnv.Java(JAVACFLAGS = '-J-mx128m',
                         target     = classesPath,
                         source     = srcPath)

todaysDate = datetime.datetime.now().strftime("%B %e, %Y %T %Z")
manifestFile = os.path.join(cwd,'Manifest')
f = open(manifestFile,'w')
f.write('Manifest-Version: 1.0 ')
f.write(todaysDate)
f.write('\n')
f.write('Main-Class: vnmr.ui.shuf.FillDBManager\n')
f.close()

jarBuildObject = jEnv.Jar(JAR      = jarBin,
                          target   = managedbTarget,
                          source   = [classesPath,
                                      manifestFile],
                          JARCHDIR = classesPath)

# define with absolute path where built files will be copied
installPath = os.path.join(cwd, os.pardir, os.pardir, os.pardir, 'vnmr', 'java')

# make sure the path(s) exist
if not os.path.exists(installPath):
   os.makedirs(installPath)

# actions to be performed after targets are built
jEnv.AddPostAction(jarBuildObject,
                      Action(Copy(installPath, os.path.join(cwd, managedbTarget))))

