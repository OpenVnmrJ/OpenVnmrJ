/*
 * Copyright (C) 2015  University of Oregon
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Apache License, as specified in the LICENSE file.
 *
 * For more information, see the LICENSE file.
 */

/* apcode op code definitions */
/*									*/
/* ---------- SETUP TYPES FROM PSG, or aliases of GO   -----------------*/
#define GO 0		/* DO NOT CHANGE THESE DEFINES  */
#define SU 1
#define SHIM 2
#define LOCK 3
#define SPIN 4
#define CHANGE 5
#define SAMPLE 6

/* ---------- House Keeping Acquisition Modes  -----------------*/
#define ACQ_DATA 1                  /* New House Keeping Cases */
#define ACQ_SS 2
#define ACQ_NOISE 3
#define ACQ_LK 4
#define FID_SHIM 5
#define I_FID	6
#define I_GID	7


/* 	The acodes are to define all operations neccessary to perform 	*/
/* an NMR experiment, i.e. to drive the hardware, etc.			*/
/*	These acodes are generated by 'psg' on the Host computer.	*/
/* The acodes and some other parameter contained in the structure 'lc.h'*/
/* are transfered from the host to the acquisition computer.		*/
/* These acodes at the time of acquisition are interpreted by apint()   */
/* one by one and takes the appropriate action. This may be just	*/
/* to increase the pointer value as is the case for a 'NO_OP', or to	*/
/* to manupulate certain values following the a-code, or to take a	*/
/* complete sweep of data, etc.					*/

/* ---------- Acquisition Acodes ---------------------------------*/
#define	NO_OP	    0	/* $00 000 a no operation code */
#define	CBEGIN	    1	/* $01 001 begin, used only as a NO_OP code */
#define	EXIT	    2	/* $02 002 NOT USED **** exit */
/* #define	STOP	    3 */	/* $03 003 stop, unless followed by SETUP (?) */
#define	HALT	    4	/* $04 004 halt */
#define	CLEAR	    5	/* $05 005 clear data memory,			*/
			/*	   observe signal: size    acodes->dpts	*/
			/*		 	   address acodes->dtst	*/
			/*	   lock signal:	   defined in APint	*/
#define	APBOUT	    6	/* $06 006 send following words to the APbus	   */
			/*	   followed by: number-1 of values to send */
			/*			the values to send	   */
#define	STFIFO	    7	/*	   start output card fifo if not running */
#define	RFIFO	    8	/* $08 010 reset output card fifo */
#define	SFIFO	    9	/* $09 011 stop  output card fifo, leave gates quiet */
			/*         while waiting to stop, check abort	     */
#define	EVENT	   10	/* $0A 012 output event to fifo */
#define	WT4VT	   11	/* $0B 013 wait certain amount of timne for variable */
			/*         temperature to settle		     */
			/*	   The number of seconds to wait is contained*/
			/*	   in a long word following the acode.	     */
			/*	   Variable Temp ok if bit set, or char from */
			/*	   port 1 or 2. (Host or diagnostics)	     */
#define	CKVTR	   12	/* $0C 014 check for variable temperature regulating */
#define	CKLOCK	   13	/* $0D 015 check if lock locked */
#define	SETPHATTR  15	/* $0F 017 set phase attributes for a channel */
#define	SETPHAS90 16	/* $10 020 set 90 degree phase lines for a channel */
/* #define	SETOPH	   17 */	/* $11 021 set obs phase index oph */
#define	ovprec	   18	/* $12 022 NOT USED **** clear overflow and set prec. */
#define	INIT	   19	/* $13 023 initialize acquisition */
#define	BRANCH	   20	/* $14 024 branch routine 		      */
			/*         Reset acode pointer to new point   */
			/*	   Offset in words follows this acode */
#define	INITDELAY  21	/* $15 025 Incremental Delay initializing routine */
#define	INCRDELAY  22	/* $16 026 Incremental Delay routine */
#define	RAMODE	   23	/* $17 027 ra mode restart routine */
#define	acq	   24	/* $18 030 NOT USED **** take data and housekeeping */
#define	PHASESHIFT 25	/* $19 031 software phase shift */
#define	INCRFUNC   27	/* $1B 033 inc value */
#define	DECRFUNC   28	/* $1C 034 dec value */
#define	ADDFUNC	   29	/* $1D 035 add value b to value a */
#define	SUBFUNC	   30	/* $1E 036 sub value b from value a */
#define	MULFUNC	   31	/* $1F 037 multiply value a * b = c */
#define	DIVFUNC	   32	/* $20 040 divide value a / b = c */
#define	DBLFUNC	   33	/* $21 041 double value a */
#define	HLVFUNC	   34	/* $22 042 halve value a */
#define	MODFUNC	   35	/* $23 043 mask value a by value b */
#define	MOD2FUNC   36	/* $24 044 mask value a by value b */
#define	MOD4FUNC   37	/* $25 045 mask value a by value b */
#define	ORFUNC	   38	/* $26 046 or value a with b and place in c. */
#define	ASSIGNFUNC 39	/* $27 047 assign value b = value a */
#define	IFZFUNC	   40	/* $28 050 test end of loop zero */
#define	IFNZFUNC   41	/* $29 051 test end of loop not zero */
#define	IFMIFUNC   42	/* $2A 052 test end of loop minus */
#define NOISE	   43	/* $2B 053 do noise check*/
#define acqstart   44	/* $2C 054 */
#define acqend	   45	/* $2D 055 */
#define	EVENT1	   46	/* $2E 056 output event to fifo	     */
			/*	   followed by: timing word1 */
			/*			gate pattern */
#define	EVENT2	   47	/* $2F 057 output event to fifo      	    */
			/*	   followed by:	timing word1	    */
			/*			gate pattern	    */
			/*			timing word2	    */
			/*	   two word timing allows precision */
#define	initstm	   48	/* $30 060 initialize sum-to-memory */
#define	autostm	   49	/* $31 061 auto sum-to-memory */

#define SETWL      50	/* $32 062 set WideLine High Speed acquisition flag */

/*#define	setipc	50 */	/* $32 062 initialize input card */
/*#define	setopc	   51 */	/* $33 063 initialize output card */
/*---------------------- RT_EVENT1 cases  ------------------------------*/
#define RT_EVENT1  51	/* $33 063 Real-Time variable controled event1 */
#define 	TCNT 1
/* #define 	HSLINE 2 */
/* #define 	TCNT_HSLINE 3 */
/* #define 	TWRD 4 */
/* #define 	TWRD_HSLINE 5 */
#define 	TWRD_TCNT 6

#define RD_HSROTOR 52  /* $34 064 Read High Speed Rotor  */
#define ACQBITMASK 53  /* $35 065 Global bit mask for acquisition */

/* ---------- CHKHDWARE   &  Control Bit Defs ---------------------- */
#define CHKHDWARE  54  /* $37 066 Generic hardware test for aborting */
			/* encoded test type an parameter types */
			/* then parameters or values then error code */
#define     RTVAR2_BIT   0x1000  /* bit to indicate 2nd real-time variable */
/* #define     EQ   	   1 */  /* comparison type */
#define     GT   	   2  /* comparison type */
/* #define     LT   	   3 */  /* comparison type */
/* #define     GT_EQ  	   4 */  /* comparison type */
/* #define     LT_EQ  	   5 */  /* comparison type */
/* #define     TRUE_BIT_AND   6 */  /* comparison type */
/* #define     FALSE_BIT_AND  7 */  /* comparison type */


#define	LOADF	   55	/* $37 067 output loadop to fifo */
#define	PFLCNT	   56	/* $38 070 put fifoloopcount */

/* ---------- INITFREQ  &  Control Bit Defs ---------------------- */
#define	INITFREQ	   57	/* $39 071 increment freq */
/*            RTVAR_BIT    0x100   bit to indicate real-time variable */
#define       PTS160_BIT   0x200   /* bit to indicate pts160 */
#define	INCRFREQ	   58	/* $3A 072 increment freq */

/* ---------- APCOUT  &  Control Bit Defs ---------------------- */
#define	APCOUT	   59	/* $3B 073 output parmater to apchip addr & register */
#define       RTVAR_BIT    0x100   /* bit to indicate real-time variable */
#define       NEGLOGIC_BIT 0x200   /* bit to indicate negative logic */
#define       PWR_NOT_ATTN 0x400   /* another bit for logic */

/* #define	ap1out	   60 */	/* $3C 074 output 1 parameter to analog port */
/* #define	apr4out	   61 */	/* $3D 075 output 1 value in d4 to analog port */
#define	CALL	   62	/* $3E 076 machine lanquage call		 */
			/*         call routine located at the address	 */
			/*	   whose offset from the acode-pointer	 */
			/*	   follows this acode (relative address) */
#define SETVT	   63	/* $3F 077 Set Varian or Oxford VT cntroller 9/12/85 */
/*  new RF acode to set PTS synthesizer freq. directly  10/10/85 GB */
#define SETPTS	   64	/* $40 100 Set New style RF pts synthesizer */
#define SETPHASE   65	/* $41 101 Set hardware phase-shift */
#define SETPOWER   66	/* $42 102 set Trans or Dec attenuation */
/* new hardware looping (jrs) */
#define HWLOOP     67	/* $43 103 Hardware looping */
#define PHASESTEP  68	/* $44 104 Phaseshift step size */
#define CLEARDATA  69	/* $45 105 clear data table  */
/*---------------------- automation acodes ------------------------------*/
#define SPINA	70	/* $46 106 rate in Hz,Modifier 2 integers   	 */
#define GAINA	71	/* $47 107 reciever gain		    	 */
#define LOCKA	72	/* $48 110 Autolock position & power	    	 */
#define DECUP   73	/* $49 111 Decoupler, Homo Hetro	    	 */
#define CHKSPIN 74	/* $4A 112 Check Spinner for regulation     	 */
#define SHIMA 	75	/* $4B 113 Autoshimming 		    	 */
#define AUTOGAIN 76	/* $4c 114 Auto reciever gain adjustment   	 */
#define GETSAMP  77	/* $4D 115 Sample Changer Retrieve Command 	 */
#define LOADSAMP 78	/* $4E 116 Sample Changer Load Command     	 */
#define LOADSHIM 79	/* $4F 117 Set Shim DACs to structure values	 */
/*-----------------------------------------------------------------------*/
/*----------------------- IVS  Acodes -----------------------------------*/
#define  GRADIENT  80
#define  VGRADIENT 81
#define  EVENTN    82
#define  LDPATRAM  83
#define  RFSHPAMP  84
#define  SETSHPTR  85
#define	GTABINDX   86	/* $56 0126 Index into Global segment for acodes */
#define	GTABRTN	   87	/* $57 0127 Return from Global segment area	*/
#define	SETLOOPSIZE 88	/* $58 0130 set FIFO loop size for implicit acqs */
#define SETHKDELAY 89	/* $59 0131 set Housekeeping delay time		*/
/*-----------------------------------------------------------------------*/
#define SETICM	90	/* $5A 0132 set Input card for proper cyclops phase */
/* #define	wtfrlk	92 */	/* $5C 0134 wait for lock reciever gate */
#define	lkdisp	93	/* $5D 0135 set up for lock display */
/* #define	BRANCHB	94 */	/* $5E 0136 byte branch routine for pseudo acode */
			/*	    Offset in bytes follows this acode   */
#define	PADLY	95	/* $5F 0137 pre-acq-delay, delay is only 	*/
			/*	    executed if acodes->ct=0.		*/
			/*          Followed by number of acodes which	*/
			/*	    determine delay, then by the EVENT1 */
			/*	    or EVENT2.				*/
#define	SETUP	96	/* $60 0140 setup hardware */
#define HKEEP	97	/* $61 0141 housekeeping */
#define NSC	98	/* $62 0142 start of next scan, if we can */
#define ACQXX	99	/* $63 0143 take data */
#define EXACQT	99	/* $63 0143 take data */
#define switchend	100	/* $64 0144 special case for debug */
#define WGCMD	101	/* waveformer cases */
#define WG3	102
#define WGGLOAD	103
#define WGILOAD	104
/*    inline table declarations */
/*    these functions are not yet settled */
#define	TABLE		105	/* a poor man's inline table */
#define	TASSIGN		106	/* get a rt indexed value from a table into an rt var */
#define	TAPBOUT		107	/* get a rt indexed set of apb outs from a table      */

#define INITTABLEVAR	108	/* initialize table variables in APINT */
#define SAVRTNAP	109	/* save/ret AP var (v1-v14) in ACODE space */
#define WGD3		110	/* dynamic variable wg data write */
#define WGDLOAD		111     /* dynamic variable wg interface */
#define XSAPBIO		112     /* apbio via the xpansion segment  */
#define PVGRADIENT	113	/* vgradient for the pfg unit */
#define INCPGRAD	114	/* ingradient for pfg  */
#define TVGRADIENT	115	/* vgradient for the 3-axis pfg unit */
#define INCTGRAD	116	/* ingradient for 3-axis pfg */
#define SETSHIM		117	/* sets one or more shims, used by rgradient */

/*----------------------- SIS  Acodes -----------------------------------*/
#define WGV3		120	/* $78 0170 dynamic variable wg inst write */
#define SWEPT_TUNE	121	/* $79 0171 starts processing of AP bus */
				/*          table to sweep PTS frequencies */
#define INCGRAD		124	/* $7C 0174 Set grad for oblique imaging */
#define INCWGRAD	125	/* $7D 0175 Set grad for oblique imaging */
#define JUSTSTFIFO	126	/* $7E 0176 Only start fifo without setting */
				/* 	    flag1. */
#define INITVSCAN	127	/* $7F 0177 Initialize real time scans */
#define WGI3		128	/* $80 0200 shaped_inc_gradient inst write */
#define ADC_CHECK       129     /* $81 0201 Set ADC overflow check parms */
#define	APSOUT	   	130	/* $82 0202 mod of APCOUT for SIS Unity attn */
				/* uses APCOUT mod bits except for following */
#define DIRECTWRITE_BIT 	0x400 /* direct write bit */
#define RFBAND_SEL  		0x800 /* indicates RFband to be set, not attn*/
#define SLI		131	/* $83 0203 Set SLI lines */
#define VSLI		132	/* $84 0204 Set SLI lines to real-time var */
#define SLI_SET 		1
#define SLI_OR 			2
#define SLI_AND 		3
#define SLI_XOR 		4
/*-----------------------------------------------------------------------*/

#define HSLINES		150	/* high speed lines settings */
#define	EVENT1_TWRD   	151	/* output event to fifo */
				/* 1 arg timing word */
#define	EVENT2_TWRD   	152	/* output event to fifo      	    */
				/* followed by:	timing word1	    */
				/*		timing word2	    */
				/* two word timing allows precision */
#define NNOISE	   	153	/* do noise check*/
#define NACQXX		154	/* $63 0143 take data */
#define NEXACQT		155	/* $63 0143 take data */
#define SPARE12		156	/* $9c 0234 set spare line offset */
#define LKFILTER	157	/* $9d set for slow and fast lock loop filter */
#define SMPL_HOLD	158	/* $9e change lk sample/hold state */
#define TUNE_FREQ	159	/* $9f Init tune freqs for unity+ hdwe */
#define SETSIGREG	160	/* $a0 Set signal handling apbus reg# b4a */
#define ENDIF	  	161	/* $a1 0241 For real-time IF-THEN */
#define ENDLOOP		162	/* $a2 0242 Real-time looping */
#define TUNE_START	163	/* $a3 0243 Put acq console in tune mode */
#define SAFETY_CHECK	164	/* $a4 0244 Check human safety system */
#define SETLOCKFREQ	165	/* $a5 0245 set lock frequency with the AP word */

/*  SETLOCKFREQ is (currently) a placeholder for INOVA only
    and is not available on the Unity or UnityPLUS systems.  */

#define ISETDATAOFFSET	176	/* Inova - Set Data offsets */
#define ISETNP		177	/* Inova - Set NP from pulsesequence */
#define IACQIUPDTCMPLT	178	/* Inova - interactive updt cmplt setting */
#define ISTARTACQIUPDT	179	/* Inova - interactive updt start */
#define ENABLEOVRFLOW   180	/* Inova - enable ADC & Receiver Overload */
#define DISABLEOVRFLOW  181	/* Inova - disable ADC & Receiver Overload */
#define INOVARTERROR	182	/* Inova - real-time error */
#define ANDFUNC		183	/* Inova - AND	*/
#define XORFUNC		184	/* Inova - XOR function	*/
#define LSLFUNC		185	/* Inova - Logical Shift Left function	*/
#define LSRFUNC		186	/* Inova - Logical Shift Right function	*/
#define NOTFUNC		187	/* Inova - Not function	*/
#define IMASKON		188	/* Inova - HSL fuction for SPARES 3-5 */
#define IMASKOFF	189	/* Inova - HSL fuction for SPARES 3-5 */

#define LOCKDEC_ON_OFF	190	/* Acode placeholder for INOVA */
#define LOCKDEC_ATTN	191	/* Acode placeholder for INOVA */
#define LOCKDECPHS90	192	/* Acode placeholder for INOVA */

#define EHWLOOP		201	/* Acode placeholder for INOVA */
#define IHOMOSPOIL	202	/* Acode placeholder for INOVA */
#define ISAFEHSL	203	/* Acode placeholder for INOVA */
#define INITHSL		204	/* Acode placeholder for INOVA */
#define IPACODE		205	/* Acode placeholder for INOVA */
#define FIDCODE		206	/* Acode placeholder for INOVA */
#define IFNZBFUNC	207	/* Acode for INOVA ifzero, elsenz construct */
#define IAPREAD		208	/* Acode placeholder for INOVA */

#define EXTGATE		210	/* External Gate, INOVA */
#define ROTORSYNC	211	/* High Speed Rotor Sync Gate, INOVA */
#define SSHA		212	/* Software Simulation of Hardware Autoshim, INOVA */
#define LOCKSEQUENCE	213	/* Perform sequence to gererate lock fids */

/* end of op code table */

/* Definitions for op arguments */
#define	LARGE	1		/* For SETSIGREG acode	*/
#define NORMAL	0		/* For SETSIGREG acode	*/


/* start of status table */

struct code
      { char *cwd;	/* character string keyed upon */
      };


#define	CTNTCODE	0000	/* $00  0 ct=nt */
#define	MAXCTCODE	0010	/* $08  8 max data acquired */

#ifdef STATUSMESSG
#define	N0CODES	sizeof(code0tab)/sizeof(struct code)
  struct code code0tab[] =
      {	"CTNT",			/* 0000 $00  0 ct=nt */
	"MXCT"			/* 0010 $08  8 max data acquired */
      };
#endif

#define	SACODE		0001	/* $01  1 stop acquistion */
#define	INLCODE		0011	/* $09  9 interlock failure */
#define	VTFCODE		0021	/* $11 17 vtr failure */
#define	SPNFAIL		0031	/* $19 25 spinner failure failure */
#define SMPFAIL		0041	/* $21 33 sample changer failure */
/*#define ADCOVRFLOW	0051 */	/* $29 41 adc over flow error	*/
#define SHMFAIL		0061	/* $31 49 shimming failure 	*/
#define LKFAIL		0071	/* $39 57 autolocking failure */
/*#define RECOVFL		0101 */	/* $41 65 reciever overflow error  */
#define GAINFAIL	0111	/* $49 73 autogain failure gain at min.*/

#ifdef STATUSMESSG
#define	N1CODES	sizeof(code1tab)/sizeof(struct code)
  struct code code1tab[] =
      { "STOP",			/* 0001 $01  1 stop acquistion */
	"LKFAIL",		/* 0011 $09  9 interlock failure */
	"VTFAIL",		/* 0021 $11 17 vtr failure */
	"SPNFAIL",		/* 0031 $19 25 spinner failure failure */
	"SMPFAIL",		/* 0041 $21 33 sample changer failure */
	"",			/* 0051 $29 41 was adc overflow error */
	"SHIMFAIL",		/* 0061 $29 41 adc overflow error */
	"LOCKFAIL",		/* 0071 $29 41 adc overflow error */
	"",			/* 0101	$41 65 was reciever overflow error  */
	"GAINFAIL"		/* 0111	$49 73 autogain failure */
      };
#endif

/*   Diagnostic messages for acquision diagnostic port only	*/

#define	CTCODE		0002	/* $02  2 ct sent to host */
#define AUTOLOCK	0012 	/* $0A 10 auto locking */
#define AUTOSHIM	0022	/* $12 18 autoshimming */
#define AUTOPWR		0032	/* $1A 26 autopower	*/
#define AUTOPHS		0042	/* $22 34 autophasing  */
#define AUTOSAMP	0052	/* $2A 42 sample changing */
#define SETSPIN		0062	/* $32 50 autospin change */
#define CHECKSPIN	0072	/* $3A 58 check spinner change */
#define	IDLECODE	0102	/* $42 66 Apint idle */
#define	RUNCODE		0112 	/* $4A 74 Acquisition running */
#define NOISECHK	0122	/* $52 82 Noise check */
#define HKEEPING	0132	/* $5A 114 IN House Keeping  */
#define LOCKCODE	0142	/* $62 122 LOCK DISPLAY */
#define GFIDCODE	0152	/* $6A 130 Interactive FID display */

#ifdef STATUSMESSG
#define	N2CODES	sizeof(code2tab)/sizeof(struct code)
  struct code code2tab[] =
      { "CT",			/* 0002 $02  2 ct sent to host */
	"AUTOLCK",		/* 0012	$0A 10 auto locking */
	"AUTOSHM", 		/* 0022	$12 18 autoshimming */
	"AUTOLKPWR", 		/* 0032	$1A 26 autopower	*/
	"AUTOLKPHS", 		/* 0042	$22 34 autophasing  */
	"AUTOSAMP", 		/* 0052	$2A 42 sample changing */
	"SETSPIN",		/* 0062	$32 50 autospin change */
	"CHKSPIN",		/* 0072	$3A 58 check spinner change */
        "IDLE",			/* 0102 $42 66 apint idle */
	"RUN ",			/* 0112 $4A 74 apint active and running */
	"NOISE",		/* 0122 $52 82 noise check */
	"HKEEP",		/* 0132 $5A 114 IN House Keeping */
	"LKDSP"			/* 0142 $62 122 Lock display */
      };
#endif

#define	LONCODE		0003	/* $03  3 low noise signal */
#define	HINCODE		0013	/* $0B 11 high noise signal */
#define ADCOVRFLOW	0023	/* $13 19 adc over flow error	*/
#define RECOVFL		0033	/* $1B 27 reciever overflow error  */

#ifdef STATUSMESSG
#define	N3CODES	sizeof(code3tab)/sizeof(struct code)
  struct code code3tab[] =
      { "LON",			/* 0003 $03  3 low noise signal */
	"HIN",			/* 0013 $0B 11 high noise signal */
	"ADCOVFL",		/* 0023 $13 19 adc overflow error */
	"RECVOVFL"		/* 0033	$1B 27 reciever overflow error  */
      };
#endif

#define	BSCODE		0004	/* $04  4 block size complete */

#ifdef STATUSMESSG
#define	N4CODES	sizeof(code4tab)/sizeof(struct code)
  struct code code4tab[] =
      { "BS"			/* 0004 $04  4 block size complete */
      };
#endif

#define	BUSSERR		0005	/* $05  5 Buss Trap Error */
#define	ADRSERR		0015	/* $0D 13 Address Trap Error */
#define	ABORTCODE	0025	/* $15 21 abort acq */
/*			0035	   $1D 29 file error acqpgm */
#define	NGIDCODE	0045	/* $25 37 wrong psg for interp */
#define	BADREAD		0055	/* $2D 45 read of acode had error */
#define	STMCODE		0065	/* $35 53 stm count not zero */
#define	FOOCODE		0075	/* $3D 61 foo error */
#define	NPOFLO		0105	/* $45 69 np larger than memory */
#define SPURIOUS        0115	/* $4D 77 spurious interrupt */
#define APBUSERR	0125	/* $55 85 ap bus error */


#ifdef STATUSMESSG
#define	N5CODES	sizeof(code5tab)/sizeof(struct code)
  struct code code5tab[] =
      {
	"BUSSTRAP",		/* 0005 $05  5 setup complete */
	"ADRSTRAP",		/* 0015 $0D 13 lock display */
	"ABRT",			/* 0025 $15 21 abort acq */
	"",			/* 0035 $1D 29 file error acqpgm */
	"NGID",			/* 0045 $25 37 wrong psg for interp */
	"BADREAD",		/* 0055 $2D 45 read of acode had error */
	"STM",			/* 0065 $35 53 stm count not zero error */
	"FOO",			/* 0075 $3D 61 fifo underflow */
	"NP",			/* 0105 $45 69 np larger than memory */
        "SPURIOUS",         	/* 0115	$4D 77 spurious interrupt */
	"APBERR"		/* 0125 $55 85 ap bus error */
      };
#endif


#ifdef STATUSMESSG
#define	N6CODES	sizeof(code6tab)/sizeof(struct code)
  struct code code6tab[] =
      {
	"RESERVED, NEVER TO BE USED!"
      };
#endif

#define	SETUPCMPT	0007	/* $07 07 SETUP complete */
#define SHIMSETUP	0017	/* $0F 15 SHIM SETUP Complete */
#define LOCKSETUP	0027	/* $17 23 auto lock SETUP Complete*/
#define SPINSETUP	0037	/* $1F 31 SPIN SETUP Complete */
#define CHANGESETUP	0047	/* $27 39 CHANGE Sample setup complete	*/
#define SAMPLESETUP	0057	/* $2F 47 SAMPLE OPTIAZATION Complete  */

#ifdef STATUSMESSG
#define	N7CODES	sizeof(code7tab)/sizeof(struct code)
  struct code code7tab[] =
      {
	"SETUP",
	"SHMSETUP",
	"LKSETUP",
	"SPNSETUP",
	"CHGSETUP",
	"SMPSETUP"
      };
#endif

struct codes
      { struct code *codets;
	int ncodes;
      };

#ifdef STATUSMESSG
  struct codes codetab[] =
      { code0tab, N0CODES,
        code1tab, N1CODES,
        code2tab, N2CODES,
        code3tab, N3CODES,
        code4tab, N4CODES,
        code5tab, N5CODES,
        code6tab, N6CODES,
        code7tab, N7CODES,
      };
#else
#ifdef USECODETAB
  struct codes codetab[8];
#endif
#endif

/* end of status table */

/* definitions for tune facilities and programs  */

struct _tunefreq {
			/* first element is count of fifowords -1 */
			int ptsapb[17]; /* pts fifo words */
			int band;	/* hi=0 lo=1 mixer band */
	         };
typedef struct _tunefreq Tunefreq;

/* end of acodes.h */

#include "ACode32.h"
